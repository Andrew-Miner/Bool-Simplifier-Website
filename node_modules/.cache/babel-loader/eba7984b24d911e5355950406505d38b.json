{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\QMCard.jsx\";\nimport React from \"react\";\nimport { Badge, Card } from \"react-bootstrap\";\nimport QM from \"../scripts/BooleanSimplifier/QMFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QMCard(props) {\n  let it = 0;\n  let end = props.qmterms.length - 1;\n\n  let getMinTermColor = minTerm => {\n    if (!props.expression) return \"info\";\n    if (props.expression.isMinTerm(minTerm)) return \"primary\";\n    if (props.expression.isDontCare(minTerm)) return \"danger\";\n    return \"info\";\n  };\n\n  let getImplicantColor = qmTerm => {\n    if (!props.expression) return \"warning\";\n    if (props.expression.isEssentialImplicant(qmTerm)) return \"success\";\n    return \"warning\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      as: \"h4\",\n      className: props.headerClass,\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      className: props.bodyClass,\n      children: props.qmterms.map(term => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-1 mt-2 d-flex justify-content-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: [\"(\", (() => {\n                const minTerms = QM.extractMinTerms(term);\n                const end = minTerms.length - 1;\n                let it = 0;\n                return QM.extractMinTerms(term).map(minTerm => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Badge, {\n                    pill: true,\n                    bg: getMinTermColor(minTerm),\n                    children: minTerm\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 42,\n                    columnNumber: 49\n                  }, this), it++ !== end && \",\"]\n                }, minTerm, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 45\n                }, this));\n              })(), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: /*#__PURE__*/_jsxDEV(Badge, {\n                bg: getImplicantColor(term),\n                className: \"ml-1\",\n                children: QM.toString(term, props.varCount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 29\n          }, this), it++ !== end && /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"m-0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 46\n          }, this)]\n        }, term.term.toString() + \"-\" + term.dashMask.toString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_c = QMCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"QMCard\");","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/QMCard.jsx"],"names":["React","Badge","Card","QM","QMCard","props","it","end","qmterms","length","getMinTermColor","minTerm","expression","isMinTerm","isDontCare","getImplicantColor","qmTerm","isEssentialImplicant","headerClass","title","bodyClass","map","term","minTerms","extractMinTerms","toString","varCount","dashMask"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Badge, Card } from \"react-bootstrap\";\r\nimport QM from \"../scripts/BooleanSimplifier/QMFunctions\";\r\n\r\nexport default function QMCard(props) {\r\n    let it = 0;\r\n    let end = props.qmterms.length - 1;\r\n\r\n    let getMinTermColor = (minTerm) => {\r\n        if (!props.expression) return \"info\";\r\n        if (props.expression.isMinTerm(minTerm)) return \"primary\";\r\n        if (props.expression.isDontCare(minTerm)) return \"danger\";\r\n        return \"info\";\r\n    };\r\n\r\n    let getImplicantColor = (qmTerm) => {\r\n        if (!props.expression) return \"warning\";\r\n        if (props.expression.isEssentialImplicant(qmTerm)) return \"success\";\r\n        return \"warning\";\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Header as=\"h4\" className={props.headerClass}>\r\n                {props.title}\r\n            </Card.Header>\r\n            <Card.Body className={props.bodyClass}>\r\n                {props.qmterms.map((term) => {\r\n                    return (\r\n                        <React.Fragment\r\n                            key={term.term.toString() + \"-\" + term.dashMask.toString()}\r\n                        >\r\n                            <div className=\"mb-1 mt-2 d-flex justify-content-between\">\r\n                                <div className=\"\">\r\n                                    {\"(\"}\r\n                                    {(() => {\r\n                                        const minTerms = QM.extractMinTerms(term);\r\n                                        const end = minTerms.length - 1;\r\n                                        let it = 0;\r\n                                        return QM.extractMinTerms(term).map((minTerm) => (\r\n                                            <React.Fragment key={minTerm}>\r\n                                                <Badge pill bg={getMinTermColor(minTerm)}>\r\n                                                    {minTerm}\r\n                                                </Badge>\r\n                                                {it++ !== end && \",\"}\r\n                                            </React.Fragment>\r\n                                        ));\r\n                                    })()}\r\n                                    {\")\"}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <Badge bg={getImplicantColor(term)} className=\"ml-1\">\r\n                                        {QM.toString(term, props.varCount)}\r\n                                    </Badge>\r\n                                </div>\r\n                            </div>\r\n                            {it++ !== end && <hr className=\"m-0\" />}\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}