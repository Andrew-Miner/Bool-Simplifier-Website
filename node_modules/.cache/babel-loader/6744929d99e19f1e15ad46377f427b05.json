{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeTypeDuplicates;\n\nvar _generated = require(\"../../validators/generated\");\n\nfunction getQualifiedName(node) {\n  return (0, _generated.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\nfunction removeTypeDuplicates(nodes) {\n  const generics = {};\n  const bases = {};\n  const typeGroups = [];\n  const types = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if ((0, _generated.isAnyTypeAnnotation)(node)) {\n      return [node];\n    }\n\n    if ((0, _generated.isFlowBaseAnnotation)(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if ((0, _generated.isUnionTypeAnnotation)(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n\n      continue;\n    }\n\n    if ((0, _generated.isGenericTypeAnnotation)(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics[name]) {\n        let existing = generics[name];\n\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (const type of Object.keys(bases)) {\n    types.push(bases[type]);\n  }\n\n  for (const name of Object.keys(generics)) {\n    types.push(generics[name]);\n  }\n\n  return types;\n}","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"],"names":["Object","defineProperty","exports","value","default","removeTypeDuplicates","_generated","require","getQualifiedName","node","isIdentifier","name","id","qualification","nodes","generics","bases","typeGroups","types","i","length","indexOf","isAnyTypeAnnotation","isFlowBaseAnnotation","type","isUnionTypeAnnotation","concat","push","isGenericTypeAnnotation","existing","typeParameters","params","keys"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,oBAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAO,CAAC,GAAGH,UAAU,CAACI,YAAf,EAA6BD,IAA7B,IAAqCA,IAAI,CAACE,IAA1C,GAAkD,GAAEF,IAAI,CAACG,EAAL,CAAQD,IAAK,IAAGH,gBAAgB,CAACC,IAAI,CAACI,aAAN,CAAqB,EAAhH;AACD;;AAED,SAASR,oBAAT,CAA8BS,KAA9B,EAAqC;AACnC,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAMV,IAAI,GAAGK,KAAK,CAACK,CAAD,CAAlB;AACA,QAAI,CAACV,IAAL,EAAW;;AAEX,QAAIS,KAAK,CAACG,OAAN,CAAcZ,IAAd,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAED,QAAI,CAAC,GAAGH,UAAU,CAACgB,mBAAf,EAAoCb,IAApC,CAAJ,EAA+C;AAC7C,aAAO,CAACA,IAAD,CAAP;AACD;;AAED,QAAI,CAAC,GAAGH,UAAU,CAACiB,oBAAf,EAAqCd,IAArC,CAAJ,EAAgD;AAC9CO,MAAAA,KAAK,CAACP,IAAI,CAACe,IAAN,CAAL,GAAmBf,IAAnB;AACA;AACD;;AAED,QAAI,CAAC,GAAGH,UAAU,CAACmB,qBAAf,EAAsChB,IAAtC,CAAJ,EAAiD;AAC/C,UAAIQ,UAAU,CAACI,OAAX,CAAmBZ,IAAI,CAACS,KAAxB,IAAiC,CAArC,EAAwC;AACtCJ,QAAAA,KAAK,GAAGA,KAAK,CAACY,MAAN,CAAajB,IAAI,CAACS,KAAlB,CAAR;AACAD,QAAAA,UAAU,CAACU,IAAX,CAAgBlB,IAAI,CAACS,KAArB;AACD;;AAED;AACD;;AAED,QAAI,CAAC,GAAGZ,UAAU,CAACsB,uBAAf,EAAwCnB,IAAxC,CAAJ,EAAmD;AACjD,YAAME,IAAI,GAAGH,gBAAgB,CAACC,IAAI,CAACG,EAAN,CAA7B;;AAEA,UAAIG,QAAQ,CAACJ,IAAD,CAAZ,EAAoB;AAClB,YAAIkB,QAAQ,GAAGd,QAAQ,CAACJ,IAAD,CAAvB;;AAEA,YAAIkB,QAAQ,CAACC,cAAb,EAA6B;AAC3B,cAAIrB,IAAI,CAACqB,cAAT,EAAyB;AACvBD,YAAAA,QAAQ,CAACC,cAAT,CAAwBC,MAAxB,GAAiC1B,oBAAoB,CAACwB,QAAQ,CAACC,cAAT,CAAwBC,MAAxB,CAA+BL,MAA/B,CAAsCjB,IAAI,CAACqB,cAAL,CAAoBC,MAA1D,CAAD,CAArD;AACD;AACF,SAJD,MAIO;AACLF,UAAAA,QAAQ,GAAGpB,IAAI,CAACqB,cAAhB;AACD;AACF,OAVD,MAUO;AACLf,QAAAA,QAAQ,CAACJ,IAAD,CAAR,GAAiBF,IAAjB;AACD;;AAED;AACD;;AAEDS,IAAAA,KAAK,CAACS,IAAN,CAAWlB,IAAX;AACD;;AAED,OAAK,MAAMe,IAAX,IAAmBxB,MAAM,CAACgC,IAAP,CAAYhB,KAAZ,CAAnB,EAAuC;AACrCE,IAAAA,KAAK,CAACS,IAAN,CAAWX,KAAK,CAACQ,IAAD,CAAhB;AACD;;AAED,OAAK,MAAMb,IAAX,IAAmBX,MAAM,CAACgC,IAAP,CAAYjB,QAAZ,CAAnB,EAA0C;AACxCG,IAAAA,KAAK,CAACS,IAAN,CAAWZ,QAAQ,CAACJ,IAAD,CAAnB;AACD;;AAED,SAAOO,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeTypeDuplicates;\n\nvar _generated = require(\"../../validators/generated\");\n\nfunction getQualifiedName(node) {\n  return (0, _generated.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\nfunction removeTypeDuplicates(nodes) {\n  const generics = {};\n  const bases = {};\n  const typeGroups = [];\n  const types = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if ((0, _generated.isAnyTypeAnnotation)(node)) {\n      return [node];\n    }\n\n    if ((0, _generated.isFlowBaseAnnotation)(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if ((0, _generated.isUnionTypeAnnotation)(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n\n      continue;\n    }\n\n    if ((0, _generated.isGenericTypeAnnotation)(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics[name]) {\n        let existing = generics[name];\n\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (const type of Object.keys(bases)) {\n    types.push(bases[type]);\n  }\n\n  for (const name of Object.keys(generics)) {\n    types.push(generics[name]);\n  }\n\n  return types;\n}"]},"metadata":{},"sourceType":"script"}