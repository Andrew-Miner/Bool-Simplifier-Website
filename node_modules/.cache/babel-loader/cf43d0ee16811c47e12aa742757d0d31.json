{"ast":null,"code":"class Symbol {\n  constructor(symbols) {\n    if (symbols instanceof Set) this.symbols = symbols;else if (symbols instanceof Array) this.symbols = new Set(symbols);else this.symbols = new Set([symbols]);\n  }\n\n  match(symbols) {\n    if (symbols instanceof Set || symbols instanceof Array) {\n      for (const sym of symbols) {\n        if (this.symbols.has(sym) === false) return false;\n      }\n\n      return true;\n    } else return this.symbols.has(symbols);\n  }\n\n  toString() {\n    if (this.symbols.size > 1) {\n      let str = \"[\";\n      let count = 0;\n\n      for (const sym of this.symbols) {\n        if (count !== this.symbols.size - 1) str += sym + \",\";else str += sym;\n        count++;\n      }\n\n      str += \"]\";\n      return str;\n    }\n\n    return \"\" + this.symbols.entries().next().value[0];\n  }\n\n}\n\nclass Terminal extends Symbol {}\n\nclass NonTerminal extends Symbol {}\n\nexport { Symbol, Terminal, NonTerminal };","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/Earley Parser/Symbol.js"],"names":["Symbol","constructor","symbols","Set","Array","match","sym","has","toString","size","str","count","entries","next","value","Terminal","NonTerminal"],"mappings":"AAAA,MAAMA,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,QAAIA,OAAO,YAAYC,GAAvB,EAA4B,KAAKD,OAAL,GAAeA,OAAf,CAA5B,KACK,IAAIA,OAAO,YAAYE,KAAvB,EAA8B,KAAKF,OAAL,GAAe,IAAIC,GAAJ,CAAQD,OAAR,CAAf,CAA9B,KACA,KAAKA,OAAL,GAAe,IAAIC,GAAJ,CAAQ,CAACD,OAAD,CAAR,CAAf;AACR;;AAEDG,EAAAA,KAAK,CAACH,OAAD,EAAU;AACX,QAAIA,OAAO,YAAYC,GAAnB,IAA0BD,OAAO,YAAYE,KAAjD,EAAwD;AACpD,WAAK,MAAME,GAAX,IAAkBJ,OAAlB,EAA2B;AACvB,YAAI,KAAKA,OAAL,CAAaK,GAAb,CAAiBD,GAAjB,MAA0B,KAA9B,EAAqC,OAAO,KAAP;AACxC;;AACD,aAAO,IAAP;AACH,KALD,MAKO,OAAO,KAAKJ,OAAL,CAAaK,GAAb,CAAiBL,OAAjB,CAAP;AACV;;AAEDM,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKN,OAAL,CAAaO,IAAb,GAAoB,CAAxB,EAA2B;AACvB,UAAIC,GAAG,GAAG,GAAV;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,WAAK,MAAML,GAAX,IAAkB,KAAKJ,OAAvB,EAAgC;AAC5B,YAAIS,KAAK,KAAK,KAAKT,OAAL,CAAaO,IAAb,GAAoB,CAAlC,EAAqCC,GAAG,IAAIJ,GAAG,GAAG,GAAb,CAArC,KACKI,GAAG,IAAIJ,GAAP;AACLK,QAAAA,KAAK;AACR;;AACDD,MAAAA,GAAG,IAAI,GAAP;AACA,aAAOA,GAAP;AACH;;AAED,WAAO,KAAK,KAAKR,OAAL,CAAaU,OAAb,GAAuBC,IAAvB,GAA8BC,KAA9B,CAAoC,CAApC,CAAZ;AACH;;AA9BQ;;AAiCb,MAAMC,QAAN,SAAuBf,MAAvB,CAA8B;;AAE9B,MAAMgB,WAAN,SAA0BhB,MAA1B,CAAiC;;AAEjC,SAASA,MAAT,EAAiBe,QAAjB,EAA2BC,WAA3B","sourcesContent":["class Symbol {\r\n    constructor(symbols) {\r\n        if (symbols instanceof Set) this.symbols = symbols;\r\n        else if (symbols instanceof Array) this.symbols = new Set(symbols);\r\n        else this.symbols = new Set([symbols]);\r\n    }\r\n\r\n    match(symbols) {\r\n        if (symbols instanceof Set || symbols instanceof Array) {\r\n            for (const sym of symbols) {\r\n                if (this.symbols.has(sym) === false) return false;\r\n            }\r\n            return true;\r\n        } else return this.symbols.has(symbols);\r\n    }\r\n\r\n    toString() {\r\n        if (this.symbols.size > 1) {\r\n            let str = \"[\";\r\n            let count = 0;\r\n            for (const sym of this.symbols) {\r\n                if (count !== this.symbols.size - 1) str += sym + \",\";\r\n                else str += sym;\r\n                count++;\r\n            }\r\n            str += \"]\";\r\n            return str;\r\n        }\r\n\r\n        return \"\" + this.symbols.entries().next().value[0];\r\n    }\r\n}\r\n\r\nclass Terminal extends Symbol {}\r\n\r\nclass NonTerminal extends Symbol {}\r\n\r\nexport { Symbol, Terminal, NonTerminal };\r\n"]},"metadata":{},"sourceType":"module"}