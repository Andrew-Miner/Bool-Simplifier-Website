{"ast":null,"code":"import _objectSpread from \"C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nvar SplitButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/_jsxs(Dropdown, _objectSpread(_objectSpread({\n    ref: ref\n  }, props), {}, {\n    as: ButtonGroup,\n    children: [/*#__PURE__*/_jsx(Button, {\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      bsPrefix: bsPrefix,\n      href: href,\n      target: target,\n      onClick: onClick,\n      type: type,\n      children: title\n    }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n      split: true,\n      id: id ? id.toString() : undefined,\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      childBsPrefix: bsPrefix,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: toggleLabel\n      })\n    }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      children: children\n    })]\n  }));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","ref","children","props","as","Toggle","split","toString","undefined","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}