{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\", \"static\"],\n  aliases: [\"Property\"],\n  fields: Object.assign({}, _core.classMethodOrPropertyCommon, {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"Private\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, _core.functionTypeAnnotationCommon, {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\"]\n});\n(0, _utils.default)(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  },\n  aliases: [\"Expression\"]\n});","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/@babel/types/lib/definitions/experimental.js"],"names":["_utils","require","_core","default","visitor","aliases","fields","process","env","BABEL_TYPES_8_BREAKING","object","validate","Object","assign","oneOfNodeTypes","callee","assertNodeType","builder","classMethodOrPropertyCommon","value","optional","definite","assertValueType","typeAnnotation","decorators","chain","assertEach","readonly","declare","expression","key","classMethodOrDeclareMethodCommon","functionTypeAnnotationCommon","body","async","exported","id","properties","elements"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\", \"static\"],\n  aliases: [\"Property\"],\n  fields: Object.assign({}, _core.classMethodOrPropertyCommon, {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"Private\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, _core.functionTypeAnnotationCommon, {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\"]\n});\n(0, _utils.default)(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  },\n  aliases: [\"Expression\"]\n});"]},"metadata":{},"sourceType":"script"}