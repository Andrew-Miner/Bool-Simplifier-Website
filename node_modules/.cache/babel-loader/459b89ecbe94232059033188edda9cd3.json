{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{Grammar,Rule}from\"./EarleyRecognizer\";import{Terminal,NonTerminal}from\"./Symbol\";import{ParseNode}from\"./EarleyParser\";export var bnfGrammar=new Grammar(\"syntax\",[new Rule(\"syntax\",[new NonTerminal(\"rule\")]),new Rule(\"syntax\",[new NonTerminal(\"syntax\"),new NonTerminal(\"rule\")]),new Rule(\"rule\",[new NonTerminal(\"opt-whitespace\"),new Terminal(\"<\"),new NonTerminal(\"rule-name\"),new Terminal(\">\"),new NonTerminal(\"opt-whitespace\"),new Terminal(\":\"),new Terminal(\":\"),new Terminal(\"=\"),new NonTerminal(\"opt-whitespace\"),new NonTerminal(\"expression\"),new NonTerminal(\"line-end\")]),new Rule(\"opt-whitespace\",[]),new Rule(\"opt-whitespace\",[new NonTerminal(\"opt-whitespace\"),new Terminal(\" \")]),new Rule(\"expression\",[new NonTerminal(\"list\")]),new Rule(\"expression\",[new NonTerminal(\"expression\"),new NonTerminal(\"opt-whitespace\"),new Terminal(\"|\"),new NonTerminal(\"opt-whitespace\"),new NonTerminal(\"list\")]),new Rule(\"line-end\",[new NonTerminal(\"opt-whitespace\"),new NonTerminal(\"EOL\")]),new Rule(\"line-end\",[new NonTerminal(\"line-end\"),new NonTerminal(\"line-end\")]),new Rule(\"EOL\",[new Terminal([\";\",\"\\n\",\"\\r\"])]),new Rule(\"list\",[new NonTerminal(\"term\")]),new Rule(\"list\",[new NonTerminal(\"list\"),new NonTerminal(\"opt-whitespace\"),new NonTerminal(\"term\")]),new Rule(\"term\",[new NonTerminal(\"terminal\")]),new Rule(\"term\",[new NonTerminal(\"non-terminal\")]),new Rule(\"non-terminal\",[new Terminal(\"<\"),new NonTerminal(\"rule-name\"),new Terminal(\">\")]),new Rule(\"terminal\",[new Terminal('\"'),new NonTerminal(\"text1\"),new Terminal('\"')]),new Rule(\"terminal\",[new Terminal(\"'\"),new NonTerminal(\"text2\"),new Terminal(\"'\")]),new Rule(\"text1\",[]),// NULL\nnew Rule(\"text1\",[new NonTerminal(\"text1\"),new NonTerminal(\"character1\")]),new Rule(\"text2\",[]),// NULL\nnew Rule(\"text2\",[new NonTerminal(\"text2\"),new NonTerminal(\"character2\")]),new Rule(\"character\",[new NonTerminal(\"letter\")]),new Rule(\"character\",[new NonTerminal(\"digit\")]),new Rule(\"character\",[new NonTerminal(\"symbol\")]),new Rule(\"digit\",[new Terminal([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"])]),new Rule(\"character1\",[new NonTerminal(\"character\")]),new Rule(\"character1\",[new Terminal(\"'\")]),new Rule(\"character2\",[new NonTerminal(\"character\")]),new Rule(\"character2\",[new Terminal('\"')]),new Rule(\"rule-name\",[new NonTerminal(\"letter\")]),new Rule(\"rule-name\",[new NonTerminal(\"rule-name\"),new NonTerminal(\"rule-char\")]),new Rule(\"rule-char\",[new NonTerminal(\"letter\")]),new Rule(\"rule-char\",[new NonTerminal(\"digit\")]),new Rule(\"rule-char\",[new Terminal(\"-\")]),new Rule(\"letter\",[new Terminal([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"])]),new Rule(\"symbol\",[new Terminal([\"|\",\" \",\"!\",\"#\",\"$\",\"%\",\"&\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\":\",\";\",\">\",\"=\",\"<\",\"?\",\"@\",\"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\"{\",\"}\",\"~\",\"\\n\",\"\\r\"])])]);export var bnfActions=[function(rule){return new ParseNode(0,\"syntax\",[rule]);},function(syntax,rule){syntax.children.push(rule);return syntax;},function(space1,lessThan,ruleName,greaterThan,space2,colon1,colon2,equal,space3,expression,lineEnd){return new ParseNode(2,\"rule\",[ruleName,expression]);},//new ParseNode(2, \"rule\", args),\nfunction(){return new ParseNode(3,\"opt-whitespace\");},function(spaces,space){if(spaces.rule===3)return space;spaces.label+=space.label;return spaces;},//new ParseNode(4, \"opt-whitespace\", args),\nfunction(list){return new ParseNode(5,\"expression\",[list]);},function(expression,space1,orTerminal,space2,list){//if (expression.rule === 5) {\nexpression.children.push(list);return expression;//}\n//return new ParseNode(6, \"expression\", [expression, list]);\n},//new ParseNode(6, \"expression\", args),\nfunction(optWhitespace,eol){return new ParseNode(7,\"line-end\",[eol]);},function(lineEnd1,lineEnd2){return new ParseNode(8,\"line-end\",lineEnd1.children.concat(lineEnd2.children));},function(eol){return eol;},function(term){return new ParseNode(11,\"list\",[term]);},function(list,optWhitespace,term){list.children.push(term);list.rule=12;return list;},function(terminal){return terminal;},//new ParseNode(12, \"term\", args),\nfunction(nonTerminal){return nonTerminal;},//new ParseNode(13, \"term\", args),\nfunction(lessThan,ruleName,greaterThan){return new ParseNode(14,\"non-terminal\",[ruleName]);},function(doubleQuote1,text1,doubleQuote2){return new ParseNode(15,\"terminal\",[text1]);},function(singleQuote1,text2,singleQuote2){return new ParseNode(16,\"terminal\",[text2]);},function(){return new ParseNode(17,\"null\");},function(text1,character1){if(text1.rule===17)return character1;text1.label+=character1.label;return text1;},//new ParseNode(18, \"text1\", args),\nfunction(){return new ParseNode(19,\"null\");},function(text2,character2){if(text2.rule===19)return character2;text2.label+=character2.label;return text2;},//new ParseNode(20, \"text2\", args),\nfunction(letter){return letter;},//new ParseNode(22, \"character\", args),\nfunction(digit){return digit;},//new ParseNode(22, \"character\", args),\nfunction(symbol){return symbol;},//new ParseNode(23, \"character\", args),\nfunction(digit){return digit;},//new ParseNode(24, \"digit\", args),\nfunction(character){return character;},//new ParseNode(25, \"character1\", args),\nfunction(singleQuote){return singleQuote;},//new ParseNode(26, \"character1\", args),\nfunction(character){return character;},//new ParseNode(27, \"character2\", args),\nfunction(doubleQuote){return doubleQuote;},// new ParseNode(28, \"character2\", args),\nfunction(letter){return letter;},//new ParseNode(29, \"rule-name\", args),\nfunction(ruleName,ruleChar){ruleName.label+=ruleChar.label;return ruleName;},//new ParseNode(30, \"rule-name\", args),\nfunction(letter){return letter;},//new ParseNode(31, \"rule-char\", args),\nfunction(digit){return digit;},//new ParseNode(32, \"rule-char\", args),\nfunction(dash){return dash;},//new ParseNode(33, \"rule-char\", args),\nfunction(letter){return letter;},//new ParseNode(34, \"letter\", args),\nfunction(symbol){return symbol;}//new ParseNode(35, \"symbol\", args),\n];export function interpretBNF(simplifiedParseTree){if(simplifiedParseTree===null||simplifiedParseTree===undefined)throw new Error(\"invalid parse tree\");if(simplifiedParseTree.label!==\"syntax\")throw new Error(\"invalid parse tree\");var newBNF=new Grammar(undefined,[]);var _iterator=_createForOfIteratorHelper(simplifiedParseTree.children),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var rule=_step.value;if(rule.label!==\"rule\")throw new Error(\"invalid syntax\");if(rule.children.length!==2)throw new Error(\"invalid rule\");if(rule.children[0].rule!==-1)throw new Error(\"invalid rule\");if(rule.children[1].label!==\"expression\")throw new Error(\"invalid rule\");var ruleName=rule.children[0].label;if(newBNF.startRule===undefined)newBNF.startRule=ruleName;var rules=interpretExpression(ruleName,rule.children[1]);newBNF.rules=newBNF.rules.concat(rules);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return newBNF;}// returns array of Rules\nfunction interpretExpression(ruleName,expressionTree){var NULL1=17;var NULL2=19;var rules=[];var hasNull=false;var _iterator2=_createForOfIteratorHelper(expressionTree.children),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var list=_step2.value;if(list.label!==\"list\")throw new Error(\"invalid expression\");var ruleDef=[];var _iterator3=_createForOfIteratorHelper(list.children),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var symbol=_step3.value;if(symbol.children.length!==1)throw new Error(\"invalid list\");var symChild=symbol.children[0];if(symbol.label===\"non-terminal\"){if(symChild.rule!==-1)throw new Error(\"invalid non-terminal\");ruleDef.push(new NonTerminal(symChild.label));}else if(symbol.label===\"terminal\"){if(symChild.rule===NULL1||symChild.rule===NULL2){if(list.children.length>1){if(hasNull===false){rules.push(new Rule(ruleName+\"-null\",[]));hasNull=true;}ruleDef.push(NonTerminal(ruleName+\"-null\"));}}else if(symChild.rule===-1){var _iterator4=_createForOfIteratorHelper(symChild.label),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var c=_step4.value;ruleDef.push(new Terminal(c));}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}else throw new Error(\"invalid terminal\");}else throw new Error(\"invalid list\");}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}rules.push(new Rule(ruleName,ruleDef));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return rules;}","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/Earley Parser/BNFInterpreter.js"],"names":["Grammar","Rule","Terminal","NonTerminal","ParseNode","bnfGrammar","bnfActions","rule","syntax","children","push","space1","lessThan","ruleName","greaterThan","space2","colon1","colon2","equal","space3","expression","lineEnd","spaces","space","label","list","orTerminal","optWhitespace","eol","lineEnd1","lineEnd2","concat","term","terminal","nonTerminal","doubleQuote1","text1","doubleQuote2","singleQuote1","text2","singleQuote2","character1","character2","letter","digit","symbol","character","singleQuote","doubleQuote","ruleChar","dash","interpretBNF","simplifiedParseTree","undefined","Error","newBNF","length","startRule","rules","interpretExpression","expressionTree","NULL1","NULL2","hasNull","ruleDef","symChild","c"],"mappings":"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","sourcesContent":["import { Grammar, Rule } from \"./EarleyRecognizer\";\r\nimport { Terminal, NonTerminal } from \"./Symbol\";\r\nimport { ParseNode } from \"./EarleyParser\";\r\n\r\nexport const bnfGrammar = new Grammar(\"syntax\", [\r\n    new Rule(\"syntax\", [new NonTerminal(\"rule\")]),\r\n    new Rule(\"syntax\", [new NonTerminal(\"syntax\"), new NonTerminal(\"rule\")]),\r\n\r\n    new Rule(\"rule\", [\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new Terminal(\"<\"),\r\n        new NonTerminal(\"rule-name\"),\r\n        new Terminal(\">\"),\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new Terminal(\":\"),\r\n        new Terminal(\":\"),\r\n        new Terminal(\"=\"),\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new NonTerminal(\"expression\"),\r\n        new NonTerminal(\"line-end\"),\r\n    ]),\r\n\r\n    new Rule(\"opt-whitespace\", []),\r\n    new Rule(\"opt-whitespace\", [new NonTerminal(\"opt-whitespace\"), new Terminal(\" \")]),\r\n\r\n    new Rule(\"expression\", [new NonTerminal(\"list\")]),\r\n    new Rule(\"expression\", [\r\n        new NonTerminal(\"expression\"),\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new Terminal(\"|\"),\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new NonTerminal(\"list\"),\r\n    ]),\r\n\r\n    new Rule(\"line-end\", [new NonTerminal(\"opt-whitespace\"), new NonTerminal(\"EOL\")]),\r\n    new Rule(\"line-end\", [new NonTerminal(\"line-end\"), new NonTerminal(\"line-end\")]),\r\n\r\n    new Rule(\"EOL\", [new Terminal([\";\", \"\\n\", \"\\r\"])]),\r\n\r\n    new Rule(\"list\", [new NonTerminal(\"term\")]),\r\n    new Rule(\"list\", [\r\n        new NonTerminal(\"list\"),\r\n        new NonTerminal(\"opt-whitespace\"),\r\n        new NonTerminal(\"term\"),\r\n    ]),\r\n\r\n    new Rule(\"term\", [new NonTerminal(\"terminal\")]),\r\n    new Rule(\"term\", [new NonTerminal(\"non-terminal\")]),\r\n\r\n    new Rule(\"non-terminal\", [\r\n        new Terminal(\"<\"),\r\n        new NonTerminal(\"rule-name\"),\r\n        new Terminal(\">\"),\r\n    ]),\r\n\r\n    new Rule(\"terminal\", [\r\n        new Terminal('\"'),\r\n        new NonTerminal(\"text1\"),\r\n        new Terminal('\"'),\r\n    ]),\r\n    new Rule(\"terminal\", [\r\n        new Terminal(\"'\"),\r\n        new NonTerminal(\"text2\"),\r\n        new Terminal(\"'\"),\r\n    ]),\r\n\r\n    new Rule(\"text1\", []), // NULL\r\n    new Rule(\"text1\", [new NonTerminal(\"text1\"), new NonTerminal(\"character1\")]),\r\n\r\n    new Rule(\"text2\", []), // NULL\r\n    new Rule(\"text2\", [new NonTerminal(\"text2\"), new NonTerminal(\"character2\")]),\r\n\r\n    new Rule(\"character\", [new NonTerminal(\"letter\")]),\r\n    new Rule(\"character\", [new NonTerminal(\"digit\")]),\r\n    new Rule(\"character\", [new NonTerminal(\"symbol\")]),\r\n\r\n    new Rule(\"digit\", [new Terminal([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])]),\r\n\r\n    new Rule(\"character1\", [new NonTerminal(\"character\")]),\r\n    new Rule(\"character1\", [new Terminal(\"'\")]),\r\n\r\n    new Rule(\"character2\", [new NonTerminal(\"character\")]),\r\n    new Rule(\"character2\", [new Terminal('\"')]),\r\n\r\n    new Rule(\"rule-name\", [new NonTerminal(\"letter\")]),\r\n    new Rule(\"rule-name\", [new NonTerminal(\"rule-name\"), new NonTerminal(\"rule-char\")]),\r\n\r\n    new Rule(\"rule-char\", [new NonTerminal(\"letter\")]),\r\n    new Rule(\"rule-char\", [new NonTerminal(\"digit\")]),\r\n    new Rule(\"rule-char\", [new Terminal(\"-\")]),\r\n\r\n    new Rule(\"letter\", [\r\n        new Terminal([\r\n            \"a\",\r\n            \"b\",\r\n            \"c\",\r\n            \"d\",\r\n            \"e\",\r\n            \"f\",\r\n            \"g\",\r\n            \"h\",\r\n            \"i\",\r\n            \"j\",\r\n            \"k\",\r\n            \"l\",\r\n            \"m\",\r\n            \"n\",\r\n            \"o\",\r\n            \"p\",\r\n            \"q\",\r\n            \"r\",\r\n            \"s\",\r\n            \"t\",\r\n            \"u\",\r\n            \"v\",\r\n            \"w\",\r\n            \"x\",\r\n            \"y\",\r\n            \"z\",\r\n            \"A\",\r\n            \"B\",\r\n            \"C\",\r\n            \"D\",\r\n            \"E\",\r\n            \"F\",\r\n            \"G\",\r\n            \"H\",\r\n            \"I\",\r\n            \"J\",\r\n            \"K\",\r\n            \"L\",\r\n            \"M\",\r\n            \"N\",\r\n            \"O\",\r\n            \"P\",\r\n            \"Q\",\r\n            \"R\",\r\n            \"S\",\r\n            \"T\",\r\n            \"U\",\r\n            \"V\",\r\n            \"W\",\r\n            \"X\",\r\n            \"Y\",\r\n            \"Z\",\r\n        ]),\r\n    ]),\r\n\r\n    new Rule(\"symbol\", [\r\n        new Terminal([\r\n            \"|\",\r\n            \" \",\r\n            \"!\",\r\n            \"#\",\r\n            \"$\",\r\n            \"%\",\r\n            \"&\",\r\n            \"(\",\r\n            \")\",\r\n            \"*\",\r\n            \"+\",\r\n            \",\",\r\n            \"-\",\r\n            \".\",\r\n            \"/\",\r\n            \":\",\r\n            \";\",\r\n            \">\",\r\n            \"=\",\r\n            \"<\",\r\n            \"?\",\r\n            \"@\",\r\n            \"[\",\r\n            \"\\\\\",\r\n            \"]\",\r\n            \"^\",\r\n            \"_\",\r\n            \"`\",\r\n            \"{\",\r\n            \"}\",\r\n            \"~\",\r\n            \"\\n\",\r\n            \"\\r\",\r\n        ]),\r\n    ]),\r\n]);\r\n\r\nexport const bnfActions = [\r\n    (rule) => new ParseNode(0, \"syntax\", [rule]),\r\n    (syntax, rule) => {\r\n        syntax.children.push(rule);\r\n        return syntax;\r\n    },\r\n\r\n    (\r\n        space1,\r\n        lessThan,\r\n        ruleName,\r\n        greaterThan,\r\n        space2,\r\n        colon1,\r\n        colon2,\r\n        equal,\r\n        space3,\r\n        expression,\r\n        lineEnd\r\n    ) => {\r\n        return new ParseNode(2, \"rule\", [ruleName, expression]);\r\n    }, //new ParseNode(2, \"rule\", args),\r\n\r\n    () => new ParseNode(3, \"opt-whitespace\"),\r\n    (spaces, space) => {\r\n        if (spaces.rule === 3) return space;\r\n        spaces.label += space.label;\r\n        return spaces;\r\n    }, //new ParseNode(4, \"opt-whitespace\", args),\r\n\r\n    (list) => new ParseNode(5, \"expression\", [list]),\r\n    (expression, space1, orTerminal, space2, list) => {\r\n        //if (expression.rule === 5) {\r\n        expression.children.push(list);\r\n        return expression;\r\n        //}\r\n        //return new ParseNode(6, \"expression\", [expression, list]);\r\n    }, //new ParseNode(6, \"expression\", args),\r\n\r\n    (optWhitespace, eol) => new ParseNode(7, \"line-end\", [eol]),\r\n    (lineEnd1, lineEnd2) =>\r\n        new ParseNode(8, \"line-end\", lineEnd1.children.concat(lineEnd2.children)),\r\n\r\n    (eol) => eol,\r\n\r\n    (term) => new ParseNode(11, \"list\", [term]),\r\n    (list, optWhitespace, term) => {\r\n        list.children.push(term);\r\n        list.rule = 12;\r\n        return list;\r\n    },\r\n\r\n    (terminal) => terminal, //new ParseNode(12, \"term\", args),\r\n    (nonTerminal) => nonTerminal, //new ParseNode(13, \"term\", args),\r\n\r\n    (lessThan, ruleName, greaterThan) => new ParseNode(14, \"non-terminal\", [ruleName]),\r\n\r\n    (doubleQuote1, text1, doubleQuote2) => new ParseNode(15, \"terminal\", [text1]),\r\n    (singleQuote1, text2, singleQuote2) => new ParseNode(16, \"terminal\", [text2]),\r\n\r\n    () => new ParseNode(17, \"null\"),\r\n    (text1, character1) => {\r\n        if (text1.rule === 17) return character1;\r\n        text1.label += character1.label;\r\n        return text1;\r\n    }, //new ParseNode(18, \"text1\", args),\r\n\r\n    () => new ParseNode(19, \"null\"),\r\n    (text2, character2) => {\r\n        if (text2.rule === 19) return character2;\r\n        text2.label += character2.label;\r\n        return text2;\r\n    }, //new ParseNode(20, \"text2\", args),\r\n\r\n    (letter) => letter, //new ParseNode(22, \"character\", args),\r\n    (digit) => digit, //new ParseNode(22, \"character\", args),\r\n    (symbol) => symbol, //new ParseNode(23, \"character\", args),\r\n\r\n    (digit) => digit, //new ParseNode(24, \"digit\", args),\r\n\r\n    (character) => character, //new ParseNode(25, \"character1\", args),\r\n    (singleQuote) => singleQuote, //new ParseNode(26, \"character1\", args),\r\n\r\n    (character) => character, //new ParseNode(27, \"character2\", args),\r\n    (doubleQuote) => doubleQuote, // new ParseNode(28, \"character2\", args),\r\n\r\n    (letter) => letter, //new ParseNode(29, \"rule-name\", args),\r\n    (ruleName, ruleChar) => {\r\n        ruleName.label += ruleChar.label;\r\n        return ruleName;\r\n    }, //new ParseNode(30, \"rule-name\", args),\r\n\r\n    (letter) => letter, //new ParseNode(31, \"rule-char\", args),\r\n    (digit) => digit, //new ParseNode(32, \"rule-char\", args),\r\n    (dash) => dash, //new ParseNode(33, \"rule-char\", args),\r\n\r\n    (letter) => letter, //new ParseNode(34, \"letter\", args),\r\n    (symbol) => symbol, //new ParseNode(35, \"symbol\", args),\r\n];\r\n\r\nexport function interpretBNF(simplifiedParseTree) {\r\n    if (simplifiedParseTree === null || simplifiedParseTree === undefined)\r\n        throw new Error(\"invalid parse tree\");\r\n    if (simplifiedParseTree.label !== \"syntax\") throw new Error(\"invalid parse tree\");\r\n\r\n    let newBNF = new Grammar(undefined, []);\r\n    for (const rule of simplifiedParseTree.children) {\r\n        if (rule.label !== \"rule\") throw new Error(\"invalid syntax\");\r\n        if (rule.children.length !== 2) throw new Error(\"invalid rule\");\r\n        if (rule.children[0].rule !== -1) throw new Error(\"invalid rule\");\r\n        if (rule.children[1].label !== \"expression\") throw new Error(\"invalid rule\");\r\n\r\n        let ruleName = rule.children[0].label;\r\n        if (newBNF.startRule === undefined) newBNF.startRule = ruleName;\r\n\r\n        let rules = interpretExpression(ruleName, rule.children[1]);\r\n        newBNF.rules = newBNF.rules.concat(rules);\r\n    }\r\n    return newBNF;\r\n}\r\n\r\n// returns array of Rules\r\nfunction interpretExpression(ruleName, expressionTree) {\r\n    const NULL1 = 17;\r\n    const NULL2 = 19;\r\n\r\n    let rules = [];\r\n    let hasNull = false;\r\n    for (const list of expressionTree.children) {\r\n        if (list.label !== \"list\") throw new Error(\"invalid expression\");\r\n\r\n        let ruleDef = [];\r\n\r\n        for (const symbol of list.children) {\r\n            if (symbol.children.length !== 1) throw new Error(\"invalid list\");\r\n            let symChild = symbol.children[0];\r\n\r\n            if (symbol.label === \"non-terminal\") {\r\n                if (symChild.rule !== -1) throw new Error(\"invalid non-terminal\");\r\n                ruleDef.push(new NonTerminal(symChild.label));\r\n            } else if (symbol.label === \"terminal\") {\r\n                if (symChild.rule === NULL1 || symChild.rule === NULL2) {\r\n                    if (list.children.length > 1) {\r\n                        if (hasNull === false) {\r\n                            rules.push(new Rule(ruleName + \"-null\", []));\r\n                            hasNull = true;\r\n                        }\r\n                        ruleDef.push(NonTerminal(ruleName + \"-null\"));\r\n                    }\r\n                } else if (symChild.rule === -1) {\r\n                    for (const c of symChild.label) {\r\n                        ruleDef.push(new Terminal(c));\r\n                    }\r\n                } else throw new Error(\"invalid terminal\");\r\n            } else throw new Error(\"invalid list\");\r\n        }\r\n\r\n        rules.push(new Rule(ruleName, ruleDef));\r\n    }\r\n    return rules;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}