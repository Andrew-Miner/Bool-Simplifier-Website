{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\ImplicantTable.jsx\";\nimport { Table } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport PM from \"../scripts/BooleanSimplifier/PMFunctions\";\nimport QM from \"../scripts/BooleanSimplifier/QMFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ImplicantTable(props) {\n  let minTerms = props.expression.getMinTerms();\n  minTerms.reverse();\n  let primeImps = props.expression.getEssentialImplicants();\n  let groups = PM.groupPrimeImplicants(primeImps, minTerms); // map\n\n  const VAR_OFFSET = 10;\n  let varCount = 0;\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Petrick Variable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Essential Implicant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), minTerms.map(term => {\n          let group = groups.get(term);\n          if (group === undefined) throw \"undefined prime implicant group [\" + parseInt(term) + \"]\";\n          let cName = \"\";\n          if (group.length === 1) cName = \"success-cell\";\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            className: cName,\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              bg: \"primary\",\n              className: \"ml-1\",\n              children: term\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: primeImps.map(imp => /*#__PURE__*/_jsxDEV(ImpRow, {\n        implicant: imp,\n        minTerms: minTerms,\n        implicantGroups: groups,\n        varCount: props.expression.getVarCount(),\n        variable: String.fromCharCode((varCount++ + VAR_OFFSET) % 26 + 65)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_c = ImplicantTable;\n\nfunction ImpRow(props) {\n  let impMinTerms = QM.extractMinTerms(props.implicant);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: props.variable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"success\",\n        className: \"ml-1\",\n        children: QM.toString(props.implicant, props.varCount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), props.minTerms.map(term => {\n      let group = props.implicantGroups.get(term);\n      if (group === undefined) throw \"undefined prime implicant group [\" + parseInt(term) + \"]\";\n      let cName = \"text-center\";\n      if (group.length === 1) cName += \"success-cell\";\n\n      if (impMinTerms.includes(term)) {\n        if (group.length === 1) {\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            className: cName,\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              bg: \"danger\",\n              className: \"ml-1\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            className: cName,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        className: cName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = ImpRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImplicantTable\");\n$RefreshReg$(_c2, \"ImpRow\");","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ImplicantTable.jsx"],"names":["Table","Badge","PM","QM","ImplicantTable","props","minTerms","expression","getMinTerms","reverse","primeImps","getEssentialImplicants","groups","groupPrimeImplicants","VAR_OFFSET","varCount","map","term","group","get","undefined","parseInt","cName","length","imp","getVarCount","String","fromCharCode","ImpRow","impMinTerms","extractMinTerms","implicant","variable","toString","implicantGroups","includes"],"mappings":"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","sourcesContent":["import { Table } from \"react-bootstrap\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport PM from \"../scripts/BooleanSimplifier/PMFunctions\";\r\nimport QM from \"../scripts/BooleanSimplifier/QMFunctions\";\r\n\r\nexport default function ImplicantTable(props) {\r\n    let minTerms = props.expression.getMinTerms();\r\n    minTerms.reverse();\r\n    \r\n    let primeImps = props.expression.getEssentialImplicants();\r\n    let groups = PM.groupPrimeImplicants(primeImps, minTerms); // map\r\n\r\n    const VAR_OFFSET = 10;\r\n    let varCount = 0;\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th>Petrick Variable</th>\r\n                    <th>Essential Implicant</th>\r\n                    {minTerms.map((term) => {\r\n                        let group = groups.get(term);\r\n\r\n                        if (group === undefined)\r\n                            throw (\r\n                                \"undefined prime implicant group [\" + parseInt(term) + \"]\"\r\n                            );\r\n\r\n                        let cName = \"\";\r\n                        if (group.length === 1) cName = \"success-cell\";\r\n\r\n                        return (\r\n                            <th className={cName}>\r\n                                <Badge bg=\"primary\" className=\"ml-1\">\r\n                                    {term}\r\n                                </Badge>\r\n                            </th>\r\n                        );\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {primeImps.map((imp) => (\r\n                    <ImpRow\r\n                        implicant={imp}\r\n                        minTerms={minTerms}\r\n                        implicantGroups={groups}\r\n                        varCount={props.expression.getVarCount()}\r\n                        variable={String.fromCharCode(\r\n                            ((varCount++ + VAR_OFFSET) % 26) + 65\r\n                        )}\r\n                    />\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nfunction ImpRow(props) {\r\n    let impMinTerms = QM.extractMinTerms(props.implicant);\r\n    return (\r\n        <tr>\r\n            <td>{props.variable}</td>\r\n            <td>\r\n                <Badge bg=\"success\" className=\"ml-1\">\r\n                    {QM.toString(props.implicant, props.varCount)}\r\n                </Badge>\r\n            </td>\r\n            {props.minTerms.map((term) => {\r\n                let group = props.implicantGroups.get(term);\r\n\r\n                if (group === undefined)\r\n                    throw \"undefined prime implicant group [\" + parseInt(term) + \"]\";\r\n\r\n                let cName = \"text-center\";\r\n                if (group.length === 1) cName += \"success-cell\";\r\n\r\n                if (impMinTerms.includes(term)) {\r\n                    if (group.length === 1) {\r\n                        return (\r\n                            <td className={cName}>\r\n                                <Badge bg=\"danger\" className=\"ml-1\">\r\n                                    <strong>X</strong>\r\n                                </Badge>\r\n                            </td>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <td className={cName}>\r\n                                <strong>X</strong>\r\n                            </td>\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return <td className={cName}></td>;\r\n            })}\r\n        </tr>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}