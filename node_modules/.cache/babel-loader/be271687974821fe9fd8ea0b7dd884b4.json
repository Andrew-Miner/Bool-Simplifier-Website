{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import StructFactory from\"../StructFactory\";import QM from\"./QMFunctions\";var LabelPair=StructFactory(\"qmTerm varName\");var PM={getPetrickSOP:function getPetrickSOP(primeImps,minTerms,log){var groupsMap=this.groupPrimeImplicants(primeImps,minTerms);var labels=[];if(log&&primeImps.length){var count=0;var _iterator=_createForOfIteratorHelper(primeImps),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var term=_step.value;labels.push(new LabelPair(term,String.fromCharCode((\"K\".charCodeAt(0)-65+count++)%26+65)));}}catch(err){_iterator.e(err);}finally{_iterator.f();}var str=\"\";var _iterator2=_createForOfIteratorHelper(groupsMap.values()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var value=_step2.value;str+=this.sumToString(value,labels);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}log.push(str);}var solution=this.expandGroups(groupsMap,log,labels);this.removeLargerTerms(solution);this.removeSmallerDashes(solution);if(log&&primeImps.length){var _str=\"(\"+this.sopToString(solution,labels)+\")\";if(log[log.length-1]!==_str)log.push(_str);}return solution;},sumToString:function sumToString(sum,labels){if(sum.length===0)return\"\";var str=\"(\";var _iterator3=_createForOfIteratorHelper(sum),_step3;try{var _loop=function _loop(){var term=_step3.value;var found=labels.find(function(pair){return pair.qmTerm.term.equals(term.term)&&pair.qmTerm.dashMask.equals(term.dashMask);});if(found!==undefined){str+=found.varName+\" + \";}};for(_iterator3.s();!(_step3=_iterator3.n()).done;){_loop();}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}str=str.substr(0,str.length-3)+\")\";return str;},groupPrimeImplicants:function groupPrimeImplicants(primeImps,minTerms){var groups=new Map();// Initialize Groups\nfor(var i=0;i<minTerms.length;i++){groups.set(minTerms[i],[]);}// Group Prime Imps (QMTerms)\nfor(var _i=0;_i<primeImps.length;_i++){// Calculate min terms using dash positions\nvar piMinTerms=QM.extractMinTerms(primeImps[_i]);for(var j=0;j<piMinTerms.length;j++){// If extracted min term is not a don't care, insert it into the map\nif(groups.has(piMinTerms[j]))groups.get(piMinTerms[j]).push(primeImps[_i]);}}return groups;},// returns SOP\nexpandGroups:function expandGroups(groups,log,labels){var _this=this;if(!groups.size)return[];var keys=Array.from(groups.keys());if(keys.length===0)return[];var workingSOP=this.toSOP(groups.get(keys[0]));var _loop2=function _loop2(i){var group=groups.get(keys[i]);if(group.length){var nextSOP=_this.toSOP(group);workingSOP=_this.foilSums(workingSOP,nextSOP);workingSOP.sort(function(sop1,sop2){return sop1.length<sop2.length?-1:sop1.length>sop2.length?1:0;});var logSOP=function logSOP(sop){var logStr=\"(\"+_this.sopToString(sop,labels)+\")\";for(var j=i+1;j<keys.length;j++){logStr+=_this.sumToString(groups.get(keys[j]),labels);}log.push(logStr);};if(log)logSOP(workingSOP);workingSOP=_this.simplifySOP(workingSOP);if(log)logSOP(workingSOP);}};for(var i=1;i<keys.length;i++){_loop2(i);}return workingSOP;},// returns SOP\noldExpandGroups:function oldExpandGroups(groups,log,labels){if(!groups.size)return[];var workingSOP;var _iterator4=_createForOfIteratorHelper(groups.values()),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var value=_step4.value;if(workingSOP===undefined){workingSOP=this.toSOP(value);continue;}if(value.length){var nextSOP=this.toSOP(value);workingSOP=this.foilSums(workingSOP,nextSOP);workingSOP.sort(function(sop1,sop2){return sop1.length>sop2.length&&1||-1;});workingSOP=this.simplifySOP(workingSOP);}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}return workingSOP;},toSOP:function toSOP(sum){var result=[];for(var i=0;i<sum.length;i++){result.push([sum[i]]);}return result;},removeLargerTerms:function removeLargerTerms(expression){if(expression.length===0)return;// Find smallest term size and remove those larger\nvar smallest=expression[0].length;for(var i=1;i<expression.length;){if(expression[i].length>smallest)expression.splice(i,1);else{if(expression[i].length<smallest)smallest=expression[i].length;i++;}}// Iterate one more time to remove remaining large terms\nfor(var _i2=0;_i2<expression.length;){if(expression[_i2].length>smallest)expression.splice(_i2,1);else _i2++;}},removeSmallerDashes:function removeSmallerDashes(expression){if(expression.length===0)return;// Find largest dash count and remove those smaller\nvar largestDash=0;for(var i=0;i<expression.length;){var dashCount=0;for(var j=0;j<expression[i].length;j++){dashCount+=expression[i][j].dashMask.cardinality();}if(dashCount<largestDash)expression.splice(i,1);else{largestDash=dashCount;i++;}}// Iterate one more time to remove remaning small (larger) terms\nfor(var _i3=0;_i3<expression.length;){var _dashCount=0;for(var _j=0;_j<expression[_i3].length;_j++){_dashCount+=expression[_i3][_j].dashMask.cardinality();}if(_dashCount<largestDash)expression.splice(_i3,1);else _i3++;}},foilSums:function foilSums(firstSum,secondSum){var result=[];for(var i=0;i<firstSum.length;i++){var _loop3=function _loop3(j){var _loop4=function _loop4(k){var product=firstSum[i].slice();var findVar=product.find(function(element){return element===secondSum[j][k];});if(findVar===undefined)product.push(secondSum[j][k]);result.push(product);};for(var k=0;k<secondSum[j].length;k++){_loop4(k);}};for(var j=0;j<secondSum.length;j++){_loop3(j);}}return result;},// Precondition: SOP is sorted by var count per term\nsimplifySOP:function simplifySOP(sop){var simplified=sop.slice();for(var i=0;i<simplified.length;i++){for(var j=i+1;j<simplified.length;){if(this.isProductSubset(simplified[i],simplified[j]))simplified.splice(j,1);else j++;}}return simplified;},lessThanQMArray:function lessThanQMArray(array1,array2){},isQMArrayEqual:function isQMArrayEqual(array1,array2){},isProductUnique:function isProductUnique(sop,product){},isProductSubset:function isProductSubset(subset,superset){if(subset.length>superset.length)return false;var _loop5=function _loop5(i){if(superset.find(function(element){return element.term.equals(subset[i].term)&&element.dashMask.equals(subset[i].dashMask);})===undefined)return{v:false};};for(var i=0;i<subset.length;i++){var _ret=_loop5(i);if(typeof _ret===\"object\")return _ret.v;}return true;},productToString:function productToString(product,varCount){var varLimit=varCount===0?25:varCount-1;// Edge case for contradictions\nif(product.length===0)return\"0\";// Edge case for tautologies\nif(product.length===1&&product[0].term.cardinality()===0&&product[0].dashMask.cardinality()===varCount+1)return\"1\";var string=\"\";for(var i=product.length-1;i>=0;i--){var firstVar=true;for(var j=varLimit;j>=0;j--){if(product[i].dashMask.get(j)===0){if(!firstVar)string+=\"*\";else firstVar=false;if(product[i].term.get(j)===0)string+=\"~\";string+=String.fromCharCode(65+(varLimit-j));}}if(i-1>=0)string+=\" + \";}return string;},mapProductToString:function mapProductToString(product,varBitSet){// Edge case for contradictions\nif(product.length===0)return\"0\";// Edge case for tautologies\nif(product.length===1&&product[0].term.cardinality()===0&&product[0].dashMask.cardinality()===varBitSet.cardinality())return\"1\";var varLimit=varBitSet.cardinality()-1;var varPos=0;var conversionMap=new Map();for(var i=0;i<26;i++){if(varBitSet.get(i)===0)continue;conversionMap.set(varLimit-varPos++,String.fromCharCode(i+65));}var string=\"\";for(var _i4=0;_i4<product.length;_i4++){var firstVar=true;for(var j=varLimit;j>=0;j--){if(product[_i4].dashMask.get(j)===0){if(!firstVar)string+=\"*\";else firstVar=false;if(product[_i4].term.get(j)===0)string+=\"~\";string+=conversionMap.get(j);}}if(_i4<product.length-1)string+=\" + \";}return string;},sopToString:function sopToString(sop,labels){var str=\"\";var _iterator5=_createForOfIteratorHelper(sop),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var term=_step5.value;var _iterator6=_createForOfIteratorHelper(term),_step6;try{var _loop6=function _loop6(){var product=_step6.value;var found=labels.find(function(pair){return pair.qmTerm.term.equals(product.term)&&pair.qmTerm.dashMask.equals(product.dashMask);});if(found!==undefined)str+=found.varName;};for(_iterator6.s();!(_step6=_iterator6.n()).done;){_loop6();}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}str+=\" + \";}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}str=str.substr(0,str.length-3);return str;}};export default PM;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/BooleanSimplifier/PMFunctions.js"],"names":["StructFactory","QM","LabelPair","PM","getPetrickSOP","primeImps","minTerms","log","groupsMap","groupPrimeImplicants","labels","length","count","term","push","String","fromCharCode","charCodeAt","str","values","value","sumToString","solution","expandGroups","removeLargerTerms","removeSmallerDashes","sopToString","sum","found","find","pair","qmTerm","equals","dashMask","undefined","varName","substr","groups","Map","i","set","piMinTerms","extractMinTerms","j","has","get","size","keys","Array","from","workingSOP","toSOP","group","nextSOP","foilSums","sort","sop1","sop2","logSOP","sop","logStr","simplifySOP","oldExpandGroups","result","expression","smallest","splice","largestDash","dashCount","cardinality","firstSum","secondSum","k","product","slice","findVar","element","simplified","isProductSubset","lessThanQMArray","array1","array2","isQMArrayEqual","isProductUnique","subset","superset","productToString","varCount","varLimit","string","firstVar","mapProductToString","varBitSet","varPos","conversionMap"],"mappings":"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","sourcesContent":["import StructFactory from \"../StructFactory\";\r\nimport QM from \"./QMFunctions\";\r\n\r\nconst LabelPair = StructFactory(\"qmTerm varName\");\r\n\r\nconst PM = {\r\n    getPetrickSOP(primeImps, minTerms, log) {\r\n        let groupsMap = this.groupPrimeImplicants(primeImps, minTerms);\r\n\r\n        let labels = [];\r\n        if (log && primeImps.length) {\r\n            let count = 0;\r\n            for (const term of primeImps) {\r\n                labels.push(\r\n                    new LabelPair(\r\n                        term,\r\n                        String.fromCharCode(\r\n                            ((\"K\".charCodeAt(0) - 65 + count++) % 26) + 65\r\n                        )\r\n                    )\r\n                );\r\n            }\r\n\r\n            let str = \"\";\r\n            for (const value of groupsMap.values())\r\n                str += this.sumToString(value, labels);\r\n            log.push(str);\r\n        }\r\n\r\n        let solution = this.expandGroups(groupsMap, log, labels);\r\n        this.removeLargerTerms(solution);\r\n        this.removeSmallerDashes(solution);\r\n\r\n        if (log && primeImps.length) {\r\n            let str = \"(\" + this.sopToString(solution, labels) + \")\";\r\n            if (log[log.length - 1] !== str) log.push(str);\r\n        }\r\n\r\n        return solution;\r\n    },\r\n\r\n    sumToString(sum, labels) {\r\n        if (sum.length === 0) return \"\";\r\n\r\n        let str = \"(\";\r\n        for (const term of sum) {\r\n            let found = labels.find(\r\n                (pair) =>\r\n                    pair.qmTerm.term.equals(term.term) &&\r\n                    pair.qmTerm.dashMask.equals(term.dashMask)\r\n            );\r\n            if (found !== undefined) {\r\n                str += found.varName + \" + \";\r\n            }\r\n        }\r\n        str = str.substr(0, str.length - 3) + \")\";\r\n        return str;\r\n    },\r\n\r\n    groupPrimeImplicants(primeImps, minTerms) {\r\n        let groups = new Map();\r\n\r\n        // Initialize Groups\r\n        for (let i = 0; i < minTerms.length; i++) groups.set(minTerms[i], []);\r\n\r\n        // Group Prime Imps (QMTerms)\r\n        for (let i = 0; i < primeImps.length; i++) {\r\n            // Calculate min terms using dash positions\r\n            let piMinTerms = QM.extractMinTerms(primeImps[i]);\r\n\r\n            for (let j = 0; j < piMinTerms.length; j++) {\r\n                // If extracted min term is not a don't care, insert it into the map\r\n                if (groups.has(piMinTerms[j]))\r\n                    groups.get(piMinTerms[j]).push(primeImps[i]);\r\n            }\r\n        }\r\n\r\n        return groups;\r\n    },\r\n\r\n    // returns SOP\r\n    expandGroups(groups, log, labels) {\r\n        if (!groups.size) return [];\r\n\r\n        let keys = Array.from(groups.keys());\r\n        if (keys.length === 0) return [];\r\n\r\n        let workingSOP = this.toSOP(groups.get(keys[0]));\r\n        for (let i = 1; i < keys.length; i++) {\r\n            let group = groups.get(keys[i]);\r\n            if (group.length) {\r\n                let nextSOP = this.toSOP(group);\r\n                workingSOP = this.foilSums(workingSOP, nextSOP);\r\n\r\n                workingSOP.sort((sop1, sop2) =>\r\n                    sop1.length < sop2.length ? -1 : sop1.length > sop2.length ? 1 : 0\r\n                );\r\n\r\n                let logSOP = (sop) => {\r\n                    let logStr = \"(\" + this.sopToString(sop, labels) + \")\";\r\n                    for (let j = i + 1; j < keys.length; j++)\r\n                        logStr += this.sumToString(groups.get(keys[j]), labels);\r\n                    log.push(logStr);\r\n                };\r\n\r\n                if (log) logSOP(workingSOP);\r\n                workingSOP = this.simplifySOP(workingSOP);\r\n                if (log) logSOP(workingSOP);\r\n            }\r\n        }\r\n\r\n        return workingSOP;\r\n    },\r\n\r\n    // returns SOP\r\n    oldExpandGroups(groups, log, labels) {\r\n        if (!groups.size) return [];\r\n\r\n        let workingSOP;\r\n        for (let value of groups.values()) {\r\n            if (workingSOP === undefined) {\r\n                workingSOP = this.toSOP(value);\r\n                continue;\r\n            }\r\n\r\n            if (value.length) {\r\n                let nextSOP = this.toSOP(value);\r\n                workingSOP = this.foilSums(workingSOP, nextSOP);\r\n\r\n                workingSOP.sort((sop1, sop2) => (sop1.length > sop2.length && 1) || -1);\r\n                workingSOP = this.simplifySOP(workingSOP);\r\n            }\r\n        }\r\n\r\n        return workingSOP;\r\n    },\r\n\r\n    toSOP(sum) {\r\n        let result = [];\r\n\r\n        for (let i = 0; i < sum.length; i++) {\r\n            result.push([sum[i]]);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    removeLargerTerms(expression) {\r\n        if (expression.length === 0) return;\r\n\r\n        // Find smallest term size and remove those larger\r\n        let smallest = expression[0].length;\r\n\r\n        for (let i = 1; i < expression.length; ) {\r\n            if (expression[i].length > smallest) expression.splice(i, 1);\r\n            else {\r\n                if (expression[i].length < smallest) smallest = expression[i].length;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // Iterate one more time to remove remaining large terms\r\n        for (let i = 0; i < expression.length; ) {\r\n            if (expression[i].length > smallest) expression.splice(i, 1);\r\n            else i++;\r\n        }\r\n    },\r\n\r\n    removeSmallerDashes(expression) {\r\n        if (expression.length === 0) return;\r\n\r\n        // Find largest dash count and remove those smaller\r\n        let largestDash = 0;\r\n        for (let i = 0; i < expression.length; ) {\r\n            let dashCount = 0;\r\n            for (let j = 0; j < expression[i].length; j++)\r\n                dashCount += expression[i][j].dashMask.cardinality();\r\n\r\n            if (dashCount < largestDash) expression.splice(i, 1);\r\n            else {\r\n                largestDash = dashCount;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // Iterate one more time to remove remaning small (larger) terms\r\n        for (let i = 0; i < expression.length; ) {\r\n            let dashCount = 0;\r\n            for (let j = 0; j < expression[i].length; j++)\r\n                dashCount += expression[i][j].dashMask.cardinality();\r\n\r\n            if (dashCount < largestDash) expression.splice(i, 1);\r\n            else i++;\r\n        }\r\n    },\r\n\r\n    foilSums(firstSum, secondSum) {\r\n        let result = [];\r\n        for (let i = 0; i < firstSum.length; i++) {\r\n            for (let j = 0; j < secondSum.length; j++) {\r\n                for (let k = 0; k < secondSum[j].length; k++) {\r\n                    let product = firstSum[i].slice();\r\n                    let findVar = product.find((element) => element === secondSum[j][k]);\r\n                    if (findVar === undefined) product.push(secondSum[j][k]);\r\n                    result.push(product);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n\r\n    // Precondition: SOP is sorted by var count per term\r\n    simplifySOP(sop) {\r\n        let simplified = sop.slice();\r\n        for (let i = 0; i < simplified.length; i++) {\r\n            for (let j = i + 1; j < simplified.length; ) {\r\n                if (this.isProductSubset(simplified[i], simplified[j]))\r\n                    simplified.splice(j, 1);\r\n                else j++;\r\n            }\r\n        }\r\n        return simplified;\r\n    },\r\n\r\n    lessThanQMArray(array1, array2) {},\r\n    isQMArrayEqual(array1, array2) {},\r\n    isProductUnique(sop, product) {},\r\n    isProductSubset(subset, superset) {\r\n        if (subset.length > superset.length) return false;\r\n\r\n        for (let i = 0; i < subset.length; i++) {\r\n            if (\r\n                superset.find((element) => {\r\n                    return (\r\n                        element.term.equals(subset[i].term) &&\r\n                        element.dashMask.equals(subset[i].dashMask)\r\n                    );\r\n                }) === undefined\r\n            )\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    productToString(product, varCount) {\r\n        let varLimit = varCount === 0 ? 25 : varCount - 1;\r\n\r\n        // Edge case for contradictions\r\n        if (product.length === 0) return \"0\";\r\n\r\n        // Edge case for tautologies\r\n        if (\r\n            product.length === 1 &&\r\n            product[0].term.cardinality() === 0 &&\r\n            product[0].dashMask.cardinality() === varCount + 1\r\n        )\r\n            return \"1\";\r\n\r\n        let string = \"\";\r\n        for (let i = product.length - 1; i >= 0; i--) {\r\n            let firstVar = true;\r\n            for (let j = varLimit; j >= 0; j--) {\r\n                if (product[i].dashMask.get(j) === 0) {\r\n                    if (!firstVar) string += \"*\";\r\n                    else firstVar = false;\r\n\r\n                    if (product[i].term.get(j) === 0) string += \"~\";\r\n                    string += String.fromCharCode(65 + (varLimit - j));\r\n                }\r\n            }\r\n\r\n            if (i - 1 >= 0) string += \" + \";\r\n        }\r\n        return string;\r\n    },\r\n\r\n    mapProductToString(product, varBitSet) {\r\n        // Edge case for contradictions\r\n        if (product.length === 0) return \"0\";\r\n\r\n        // Edge case for tautologies\r\n        if (\r\n            product.length === 1 &&\r\n            product[0].term.cardinality() === 0 &&\r\n            product[0].dashMask.cardinality() === varBitSet.cardinality()\r\n        )\r\n            return \"1\";\r\n\r\n        let varLimit = varBitSet.cardinality() - 1;\r\n        let varPos = 0;\r\n        let conversionMap = new Map();\r\n        for (let i = 0; i < 26; i++) {\r\n            if (varBitSet.get(i) === 0) continue;\r\n            conversionMap.set(varLimit - varPos++, String.fromCharCode(i + 65));\r\n        }\r\n\r\n        let string = \"\";\r\n        for (let i = 0; i < product.length; i++) {\r\n            let firstVar = true;\r\n            for (let j = varLimit; j >= 0; j--) {\r\n                if (product[i].dashMask.get(j) === 0) {\r\n                    if (!firstVar) string += \"*\";\r\n                    else firstVar = false;\r\n\r\n                    if (product[i].term.get(j) === 0) string += \"~\";\r\n                    string += conversionMap.get(j);\r\n                }\r\n            }\r\n\r\n            if (i < product.length - 1) string += \" + \";\r\n        }\r\n        return string;\r\n    },\r\n\r\n    sopToString(sop, labels) {\r\n        let str = \"\";\r\n        for (const term of sop) {\r\n            for (const product of term) {\r\n                let found = labels.find(\r\n                    (pair) =>\r\n                        pair.qmTerm.term.equals(product.term) &&\r\n                        pair.qmTerm.dashMask.equals(product.dashMask)\r\n                );\r\n                if (found !== undefined) str += found.varName;\r\n            }\r\n            str += \" + \";\r\n        }\r\n        str = str.substr(0, str.length - 3);\r\n\r\n        return str;\r\n    },\r\n};\r\n\r\nexport default PM;\r\n"]},"metadata":{},"sourceType":"module"}