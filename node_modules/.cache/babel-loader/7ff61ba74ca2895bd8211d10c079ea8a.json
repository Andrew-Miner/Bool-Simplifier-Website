{"ast":null,"code":"/* eslint-disable no-eval */export var BOOL_GRAMMAR='<exp>       ::= <exp> \"+\" <complexOp>;\\n'+\"<exp>       ::= <complexOp>;\\n\"+'<complexOp> ::= <complexOp> \"@\" <product> | <complexOp> \"%\" <product> | <complexOp> \"^\" <product>;\\n'+\"<complexOp> ::= <product>;\\n\"+'<product>   ::= <product> \"*\" <factor>;\\n'+\"<product>   ::= <factor>;\\n\"+'<factor>    ::= \"(\" <exp> \")\" | <var> | <bool> | \"~\" <factor>;\\n'+'<bool>      ::= \"1\" | \"0\";'+'<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";';export var BOOL_CALC_ACTIONS=[function(lOperand,op,rOperand){return eval(lOperand+\" || \"+rOperand);},function(complexOp){return complexOp;},function(lOperand,op,rOperand){return eval(\"!(\"+lOperand+\" && \"+rOperand+\")\");},function(lOperand,op,rOperand){return eval(\"!(\"+lOperand+\" || \"+rOperand+\")\");},function(lOperand,op,rOperand){return eval(\"(!\"+lOperand+\" && \"+rOperand+\") || (\"+lOperand+\" && !\"+rOperand+\")\");},function(product){return product;},function(lOperand,op,rOperand){return eval(lOperand+\" && \"+rOperand);},function(factor){return factor;},function(lParen,exp,rParen){return exp;},function(v){return v;},function(b){return b;},function(nt,operand){return eval(\"!\"+operand);},function(b){return true;},function(b){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;},function(v){return false;}];/*<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <val> | \"~\" <factor>;\r\n<val>       ::= \"0\" | \"1\";\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n(lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"(!\" + lOperand + \" && \" + rOperand + \") || (\" + lOperand + \" && !\" + rOperand + \")\"),\r\n(product) => product,\r\n(lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n(factor) => factor,\r\n(lParen, exp, rParen) => exp,\r\n(v) => v,\r\n(nt, operand) => eval(\"!\" + operand),\r\n(v) => eval(v + \"== 1\"),\r\n(v) => eval(v + \"== 1\")\r\n\r\n<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <var> | \"~\" <factor>;\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n\r\n(lOperand, op, rOperand) => new ParseNode(-1, \"exp\", [lOperand, op, rOperand]),\r\n(complexOp) => new ParseNode(-1, \"exp\", [complexOp]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(product) => new ParseNode(-1, \"complexOp\", [product]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"product\", [lOperand, op, rOperand]),\r\n(factor) => new ParseNode(-1, \"product\", [factor]),\r\n(lParen, exp, rParen) => new ParseNode(-1, \"Factor\", [lParen, exp, rParen]),\r\n(v) => new ParseNode(-1, \"factor\", [v]),\r\n(nt, factor) => new ParseNode(-1, \"factor\", [nt, factor]),\r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v])\r\n\r\n(A+~C+B*D)*(~A+(~B+D)*(C+~D))\r\n\"~(A^C)@(B%D)\"\r\n\r\n(lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(product) => product,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(factor) => factor,\r\n(lParen, exp, rParen) => [lParen, exp, rParen],\r\n(v) => v,\r\n(nt, factor) => [nt, factor],\r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v,  \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v\r\n*/","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/BooleanSimplifier/BoolExpressionGrammar.js"],"names":["BOOL_GRAMMAR","BOOL_CALC_ACTIONS","lOperand","op","rOperand","eval","complexOp","product","factor","lParen","exp","rParen","v","b","nt","operand"],"mappings":"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AO,MAAP,EA5D6B,CA6D7B,SAACA,CAAD,QAAO,MAAP,EA7D6B,CA8D7B,SAACA,CAAD,QAAO,MAAP,EA9D6B,CA+D7B,SAACA,CAAD,QAAO,MAAP,EA/D6B,CAgE7B,SAACA,CAAD,QAAO,MAAP,EAhE6B,CAiE7B,SAACA,CAAD,QAAO,MAAP,EAjE6B,CAkE7B,SAACA,CAAD,QAAO,MAAP,EAlE6B,CAmE7B,SAACA,CAAD,QAAO,MAAP,EAnE6B,CAoE7B,SAACA,CAAD,QAAO,MAAP,EApE6B,CAqE7B,SAACA,CAAD,QAAO,MAAP,EArE6B,CAsE7B,SAACA,CAAD,QAAO,MAAP,EAtE6B,CAuE7B,SAACA,CAAD,QAAO,MAAP,EAvE6B,CAwE7B,SAACA,CAAD,QAAO,MAAP,EAxE6B,CAyE7B,SAACA,CAAD,QAAO,MAAP,EAzE6B,CA0E7B,SAACA,CAAD,QAAO,MAAP,EA1E6B,CA2E7B,SAACA,CAAD,QAAO,MAAP,EA3E6B,CA4E7B,SAACA,CAAD,QAAO,MAAP,EA5E6B,CA6E7B,SAACA,CAAD,QAAO,MAAP,EA7E6B,CAA1B,CAgFP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable no-eval */\r\n\r\nexport const BOOL_GRAMMAR =\r\n    '<exp>       ::= <exp> \"+\" <complexOp>;\\n' +\r\n    \"<exp>       ::= <complexOp>;\\n\" +\r\n    '<complexOp> ::= <complexOp> \"@\" <product> | <complexOp> \"%\" <product> | <complexOp> \"^\" <product>;\\n' +\r\n    \"<complexOp> ::= <product>;\\n\" +\r\n    '<product>   ::= <product> \"*\" <factor>;\\n' +\r\n    \"<product>   ::= <factor>;\\n\" +\r\n    '<factor>    ::= \"(\" <exp> \")\" | <var> | <bool> | \"~\" <factor>;\\n' +\r\n    '<bool>      ::= \"1\" | \"0\";' +\r\n    '<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";';\r\n\r\nexport const BOOL_CALC_ACTIONS = [\r\n    (lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n    (complexOp) => complexOp,\r\n    (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n    (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n    (lOperand, op, rOperand) =>\r\n        eval(\r\n            \"(!\" +\r\n                lOperand +\r\n                \" && \" +\r\n                rOperand +\r\n                \") || (\" +\r\n                lOperand +\r\n                \" && !\" +\r\n                rOperand +\r\n                \")\"\r\n        ),\r\n    (product) => product,\r\n    (lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n    (factor) => factor,\r\n    (lParen, exp, rParen) => exp,\r\n    (v) => v,\r\n    (b) => b,\r\n    (nt, operand) => eval(\"!\" + operand),\r\n    (b) => true,\r\n    (b) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n];\r\n\r\n/*<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <val> | \"~\" <factor>;\r\n<val>       ::= \"0\" | \"1\";\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n(lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"(!\" + lOperand + \" && \" + rOperand + \") || (\" + lOperand + \" && !\" + rOperand + \")\"),\r\n(product) => product,\r\n(lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n(factor) => factor,\r\n(lParen, exp, rParen) => exp,\r\n(v) => v,\r\n(nt, operand) => eval(\"!\" + operand),\r\n(v) => eval(v + \"== 1\"),\r\n(v) => eval(v + \"== 1\")\r\n\r\n<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <var> | \"~\" <factor>;\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n\r\n(lOperand, op, rOperand) => new ParseNode(-1, \"exp\", [lOperand, op, rOperand]),\r\n(complexOp) => new ParseNode(-1, \"exp\", [complexOp]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(product) => new ParseNode(-1, \"complexOp\", [product]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"product\", [lOperand, op, rOperand]),\r\n(factor) => new ParseNode(-1, \"product\", [factor]),\r\n(lParen, exp, rParen) => new ParseNode(-1, \"Factor\", [lParen, exp, rParen]),\r\n(v) => new ParseNode(-1, \"factor\", [v]),\r\n(nt, factor) => new ParseNode(-1, \"factor\", [nt, factor]),\r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v])\r\n\r\n(A+~C+B*D)*(~A+(~B+D)*(C+~D))\r\n\"~(A^C)@(B%D)\"\r\n\r\n(lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(product) => product,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(factor) => factor,\r\n(lParen, exp, rParen) => [lParen, exp, rParen],\r\n(v) => v,\r\n(nt, factor) => [nt, factor],\r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v,  \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}