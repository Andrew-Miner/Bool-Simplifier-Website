{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\ExpressionForm.jsx\";\nimport { thisExpression } from \"@babel/types\";\nimport React from \"react\";\nimport { InputGroup, FormControl, Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExpressionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        expValue: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      alert(\"Expression submitted: \" + this.state.expValue);\n\n      if (event.currentTarget.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.setState({\n        validated: true\n      });\n    };\n\n    this.constructExpression = () => {\n      try {\n        this.props.expression = BoolExpression.ExpressionInstance(expStr, true);\n        let exp = BoolExpression.ExpressionInstance(expStr, true);\n        console.log(\"Expression: \", exp.toString());\n        console.log(\"Min Terms: \", exp.getMinTerms());\n        console.log(\"Var Count: \", exp.getVarCount());\n        console.log(\"Prime Implicants: \", exp.getPrimeImplicants());\n        console.log(\"Petrick SOP: \", exp.getPetrickSOP()); // Print Prime Implicants\n\n        for (const implicant of exp.getPrimeImpStrings()) {\n          console.log(implicant);\n        }\n\n        let petrickSOP = exp.getSOPStrings();\n\n        for (let i = 0; i < petrickSOP.length; i++) {\n          console.log(\"Solution \", i + 1, \": \", petrickSOP[i]);\n        }\n\n        let test = exp.getQMLog();\n        console.log(\"QM Log: \", test);\n        console.log(\"PM Log: \", exp.getPMLog());\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      expValue: \"\",\n      validated: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      validated: this.state.validated,\n      onSubmit: this.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"mb-3\",\n          hasValidation: true,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            required: true,\n            placeholder: \"Enter Expression\",\n            \"aria-label\": \"Enter Expression\",\n            \"aria-describedby\": \"basic-addon2\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            id: \"button-addon2\",\n            type: \"submit\",\n            children: \"Simplify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"Invalid Expression.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ExpressionForm;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ExpressionForm.jsx"],"names":["thisExpression","React","InputGroup","FormControl","Button","Form","ExpressionForm","Component","constructor","props","handleChange","event","setState","expValue","target","value","handleSubmit","alert","state","currentTarget","checkValidity","preventDefault","stopPropagation","validated","constructExpression","expression","BoolExpression","ExpressionInstance","expStr","exp","console","log","toString","getMinTerms","getVarCount","getPrimeImplicants","getPetrickSOP","implicant","getPrimeImpStrings","petrickSOP","getSOPStrings","i","length","test","getQMLog","getPMLog","error","render"],"mappings":"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","sourcesContent":["import { thisExpression } from \"@babel/types\";\r\nimport React from \"react\";\r\nimport { InputGroup, FormControl, Button, Form } from \"react-bootstrap\";\r\n\r\nclass ExpressionForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { expValue: \"\", validated: false };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ expValue: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        alert(\"Expression submitted: \" + this.state.expValue);\r\n        if (event.currentTarget.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        this.setState({ validated: true });\r\n    };\r\n\r\n    constructExpression = () => {\r\n        try {\r\n            this.props.expression = BoolExpression.ExpressionInstance(expStr, true);\r\n            let exp = BoolExpression.ExpressionInstance(expStr, true);\r\n\r\n            console.log(\"Expression: \", exp.toString());\r\n            console.log(\"Min Terms: \", exp.getMinTerms());\r\n            console.log(\"Var Count: \", exp.getVarCount());\r\n            console.log(\"Prime Implicants: \", exp.getPrimeImplicants());\r\n            console.log(\"Petrick SOP: \", exp.getPetrickSOP());\r\n            // Print Prime Implicants\r\n            for (const implicant of exp.getPrimeImpStrings()) {\r\n                console.log(implicant);\r\n            }\r\n\r\n            let petrickSOP = exp.getSOPStrings();\r\n            for (let i = 0; i < petrickSOP.length; i++) {\r\n                console.log(\"Solution \", i + 1, \": \", petrickSOP[i]);\r\n            }\r\n\r\n            let test = exp.getQMLog();\r\n            console.log(\"QM Log: \", test);\r\n            console.log(\"PM Log: \", exp.getPMLog());\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                noValidate\r\n                validated={this.state.validated}\r\n                onSubmit={this.handleSubmit}\r\n            >\r\n                <Form.Group>\r\n                    <InputGroup className=\"mb-3\" hasValidation>\r\n                        <FormControl\r\n                            required\r\n                            placeholder=\"Enter Expression\"\r\n                            aria-label=\"Enter Expression\"\r\n                            aria-describedby=\"basic-addon2\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <Button\r\n                            variant=\"outline-secondary\"\r\n                            id=\"button-addon2\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Simplify\r\n                        </Button>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Invalid Expression.\r\n                        </Form.Control.Feedback>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpressionForm;\r\n"]},"metadata":{},"sourceType":"module"}