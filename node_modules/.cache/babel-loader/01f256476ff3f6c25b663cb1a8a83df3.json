{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\ExpressionForm.jsx\";\nimport { thisExpression } from \"@babel/types\";\nimport React from \"react\";\nimport { InputGroup, FormControl, Button, Form, Col, Row } from \"react-bootstrap\";\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExpressionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        expValue: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      alert(\"Expression submitted: \" + this.state.expValue);\n\n      try {\n        this.expression = BoolExpression.ExpressionInstance(this.state.expValue, true);\n        this.setState({\n          isInvalid: false\n        });\n      } catch (error) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState({\n          isInvalid: true,\n          errorMsg: \"Error: \" + error + \"!\"\n        });\n      }\n    };\n\n    this.state = {\n      expValue: \"\",\n      isInvalid: false,\n      errorMsg: \"Invalid Expression\"\n    };\n    this.expression = null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      validated: this.state.validated,\n      onSubmit: this.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mb-1\",\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          md: \"10\",\n          controlId: \"expressionForm\",\n          children: /*#__PURE__*/_jsxDEV(InputGroup, {\n            hasValidation: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              placeholder: \"Enter Expression\",\n              \"aria-label\": \"Enter Expression\",\n              \"aria-describedby\": \"basic-addon\",\n              onChange: this.handleChange,\n              isInvalid: this.state.isInvalid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              id: \"button-addon\",\n              type: \"submit\",\n              children: \"Simplify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: this.state.errorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ExpressionForm;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ExpressionForm.jsx"],"names":["thisExpression","React","InputGroup","FormControl","Button","Form","Col","Row","BoolExpression","ExpressionForm","Component","constructor","props","handleChange","event","setState","expValue","target","value","handleSubmit","alert","state","expression","ExpressionInstance","isInvalid","error","preventDefault","stopPropagation","errorMsg","render","validated"],"mappings":";AAAA,SAASA,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,MAAlC,EAA0CC,IAA1C,EAAgDC,GAAhD,EAAqDC,GAArD,QAAgE,iBAAhE;AACA,OAAOC,cAAP,MAA2B,6CAA3B;;;AAEA,MAAMC,cAAN,SAA6BR,KAAK,CAACS,SAAnC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMnBC,YANmB,GAMHC,KAAD,IAAW;AACtB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAzB,OAAd;AACH,KARkB;;AAAA,SAUnBC,YAVmB,GAUHL,KAAD,IAAW;AACtBM,MAAAA,KAAK,CAAC,2BAA2B,KAAKC,KAAL,CAAWL,QAAvC,CAAL;;AAEA,UAAI;AACA,aAAKM,UAAL,GAAkBd,cAAc,CAACe,kBAAf,CACd,KAAKF,KAAL,CAAWL,QADG,EAEd,IAFc,CAAlB;AAIA,aAAKD,QAAL,CAAc;AAAES,UAAAA,SAAS,EAAE;AAAb,SAAd;AACH,OAND,CAME,OAAOC,KAAP,EAAc;AACZX,QAAAA,KAAK,CAACY,cAAN;AACAZ,QAAAA,KAAK,CAACa,eAAN;AACA,aAAKZ,QAAL,CAAc;AAAES,UAAAA,SAAS,EAAE,IAAb;AAAmBI,UAAAA,QAAQ,EAAE,YAAYH,KAAZ,GAAoB;AAAjD,SAAd;AACH;AACJ,KAxBkB;;AAEf,SAAKJ,KAAL,GAAa;AAAEL,MAAAA,QAAQ,EAAE,EAAZ;AAAgBQ,MAAAA,SAAS,EAAE,KAA3B;AAAkCI,MAAAA,QAAQ,EAAE;AAA5C,KAAb;AACA,SAAKN,UAAL,GAAkB,IAAlB;AACH;;AAsBDO,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,IAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,SAAS,EAAE,KAAKR,KAAL,CAAWS,SAF1B;AAGI,MAAA,QAAQ,EAAE,KAAKX,YAHnB;AAAA,6BAKI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,EAAE,EAAEb,GAAhB;AAAqB,UAAA,EAAE,EAAC,IAAxB;AAA6B,UAAA,SAAS,EAAC,gBAAvC;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,aAAa,MAAzB;AAAA,oCACI,QAAC,WAAD;AACI,cAAA,QAAQ,MADZ;AAEI,cAAA,WAAW,EAAC,kBAFhB;AAGI,4BAAW,kBAHf;AAII,kCAAiB,aAJrB;AAKI,cAAA,QAAQ,EAAE,KAAKO,YALnB;AAMI,cAAA,SAAS,EAAE,KAAKQ,KAAL,CAAWG;AAN1B;AAAA;AAAA;AAAA;AAAA,oBADJ,eASI,QAAC,MAAD;AACI,cAAA,OAAO,EAAC,mBADZ;AAEI,cAAA,EAAE,EAAC,cAFP;AAGI,cAAA,IAAI,EAAC,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATJ,eAgBI,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,cAAA,IAAI,EAAC,SAA5B;AAAA,wBACK,KAAKH,KAAL,CAAWO;AADhB;AAAA;AAAA;AAAA;AAAA,oBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH;;AA5DwC;;AA+D7C,eAAenB,cAAf","sourcesContent":["import { thisExpression } from \"@babel/types\";\r\nimport React from \"react\";\r\nimport { InputGroup, FormControl, Button, Form, Col, Row } from \"react-bootstrap\";\r\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\r\n\r\nclass ExpressionForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { expValue: \"\", isInvalid: false, errorMsg: \"Invalid Expression\" };\r\n        this.expression = null;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ expValue: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        alert(\"Expression submitted: \" + this.state.expValue);\r\n\r\n        try {\r\n            this.expression = BoolExpression.ExpressionInstance(\r\n                this.state.expValue,\r\n                true\r\n            );\r\n            this.setState({ isInvalid: false });\r\n        } catch (error) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.setState({ isInvalid: true, errorMsg: \"Error: \" + error + \"!\" });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                noValidate\r\n                validated={this.state.validated}\r\n                onSubmit={this.handleSubmit}\r\n            >\r\n                <Row className=\"mb-1\">\r\n                    <Form.Group as={Col} md=\"10\" controlId=\"expressionForm\">\r\n                        <InputGroup hasValidation>\r\n                            <FormControl\r\n                                required\r\n                                placeholder=\"Enter Expression\"\r\n                                aria-label=\"Enter Expression\"\r\n                                aria-describedby=\"basic-addon\"\r\n                                onChange={this.handleChange}\r\n                                isInvalid={this.state.isInvalid}\r\n                            />\r\n                            <Button\r\n                                variant=\"outline-secondary\"\r\n                                id=\"button-addon\"\r\n                                type=\"submit\"\r\n                            >\r\n                                Simplify\r\n                            </Button>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {this.state.errorMsg}\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                </Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpressionForm;\r\n"]},"metadata":{},"sourceType":"module"}