{"ast":null,"code":"export const BOOL_GRAMMAR = '<exp>       ::= <exp> \"+\" <complexOp>;\\n' + \"<exp>       ::= <complexOp>;\\n\" + '<complexOp> ::= <complexOp> \"@\" <product> | <complexOp> \"%\" <product> | <complexOp> \"^\" <product>;\\n' + \"<complexOp> ::= <product>;\\n\" + '<product>   ::= <product> \"*\" <factor>;\\n' + \"<product>   ::= <factor>;\\n\" + '<factor>    ::= \"(\" <exp> \")\" | <var> | <bool> | \"~\" <factor>;\\n' + '<bool>      ::= \"1\" | \"0\";' + '<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";';\nexport const BOOL_CALC_ACTIONS = [(lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand), complexOp => complexOp, (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"), (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"), (lOperand, op, rOperand) => eval(\"(!\" + lOperand + \" && \" + rOperand + \") || (\" + lOperand + \" && !\" + rOperand + \")\"), product => product, (lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand), factor => factor, (lParen, exp, rParen) => exp, v => v, b => b, (nt, operand) => eval(\"!\" + operand), b => true, b => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false, v => false];\n/*<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <val> | \"~\" <factor>;\r\n<val>       ::= \"0\" | \"1\";\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n(lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"(!\" + lOperand + \" && \" + rOperand + \") || (\" + lOperand + \" && !\" + rOperand + \")\"),\r\n(product) => product,\r\n(lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n(factor) => factor,\r\n(lParen, exp, rParen) => exp,\r\n(v) => v,\r\n(nt, operand) => eval(\"!\" + operand),\r\n(v) => eval(v + \"== 1\"),\r\n(v) => eval(v + \"== 1\")\r\n\r\n<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <var> | \"~\" <factor>;\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n\r\n(lOperand, op, rOperand) => new ParseNode(-1, \"exp\", [lOperand, op, rOperand]),\r\n(complexOp) => new ParseNode(-1, \"exp\", [complexOp]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(product) => new ParseNode(-1, \"complexOp\", [product]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"product\", [lOperand, op, rOperand]),\r\n(factor) => new ParseNode(-1, \"product\", [factor]),\r\n(lParen, exp, rParen) => new ParseNode(-1, \"Factor\", [lParen, exp, rParen]),\r\n(v) => new ParseNode(-1, \"factor\", [v]),\r\n(nt, factor) => new ParseNode(-1, \"factor\", [nt, factor]),\r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v])\r\n\r\n(A+~C+B*D)*(~A+(~B+D)*(C+~D))\r\n\"~(A^C)@(B%D)\"\r\n\r\n(lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(product) => product,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(factor) => factor,\r\n(lParen, exp, rParen) => [lParen, exp, rParen],\r\n(v) => v,\r\n(nt, factor) => [nt, factor],\r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v,  \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v\r\n*/","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/BooleanSimplifier/BoolExpressionGrammar.js"],"names":["BOOL_GRAMMAR","BOOL_CALC_ACTIONS","lOperand","op","rOperand","eval","complexOp","product","factor","lParen","exp","rParen","v","b","nt","operand"],"mappings":"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","sourcesContent":["export const BOOL_GRAMMAR =\r\n    '<exp>       ::= <exp> \"+\" <complexOp>;\\n' +\r\n    \"<exp>       ::= <complexOp>;\\n\" +\r\n    '<complexOp> ::= <complexOp> \"@\" <product> | <complexOp> \"%\" <product> | <complexOp> \"^\" <product>;\\n' +\r\n    \"<complexOp> ::= <product>;\\n\" +\r\n    '<product>   ::= <product> \"*\" <factor>;\\n' +\r\n    \"<product>   ::= <factor>;\\n\" +\r\n    '<factor>    ::= \"(\" <exp> \")\" | <var> | <bool> | \"~\" <factor>;\\n' +    \r\n    '<bool>      ::= \"1\" | \"0\";' +\r\n    '<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";'\r\n\r\n\r\nexport const BOOL_CALC_ACTIONS = [\r\n    (lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n    (complexOp) => complexOp,\r\n    (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n    (lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n    (lOperand, op, rOperand) =>\r\n        eval(\r\n            \"(!\" +\r\n                lOperand +\r\n                \" && \" +\r\n                rOperand +\r\n                \") || (\" +\r\n                lOperand +\r\n                \" && !\" +\r\n                rOperand +\r\n                \")\"\r\n        ),\r\n    (product) => product,\r\n    (lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n    (factor) => factor,\r\n    (lParen, exp, rParen) => exp,\r\n    (v) => v,\r\n    (b) => b,\r\n    (nt, operand) => eval(\"!\" + operand),\r\n    (b) => true,\r\n    (b) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n    (v) => false,\r\n];\r\n\r\n/*<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <val> | \"~\" <factor>;\r\n<val>       ::= \"0\" | \"1\";\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n(lOperand, op, rOperand) => eval(lOperand + \" || \" + rOperand),\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" && \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"!(\" + lOperand + \" || \" + rOperand + \")\"),\r\n(lOperand, op, rOperand) => eval(\"(!\" + lOperand + \" && \" + rOperand + \") || (\" + lOperand + \" && !\" + rOperand + \")\"),\r\n(product) => product,\r\n(lOperand, op, rOperand) => eval(lOperand + \" && \" + rOperand),\r\n(factor) => factor,\r\n(lParen, exp, rParen) => exp,\r\n(v) => v,\r\n(nt, operand) => eval(\"!\" + operand),\r\n(v) => eval(v + \"== 1\"),\r\n(v) => eval(v + \"== 1\")\r\n\r\n<exp>       ::= <complexOp> \"+\" <exp>;\r\n<exp>       ::= <complexOp>;\r\n<complexOp> ::= <product> \"@\" <complexOp> | <product> \"%\" <complexOp> | <product> \"^\" <complexOp>;\r\n<complexOp> ::= <product>;\r\n<product>   ::= <factor> \"*\" <product>;\r\n<product>   ::= <factor>;\r\n<factor>    ::= \"(\" <exp> \")\" | <var> | \"~\" <factor>;\r\n<var>       ::= \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\n\r\n(lOperand, op, rOperand) => new ParseNode(-1, \"exp\", [lOperand, op, rOperand]),\r\n(complexOp) => new ParseNode(-1, \"exp\", [complexOp]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"complexOp\", [lOperand, op, rOperand]),\r\n(product) => new ParseNode(-1, \"complexOp\", [product]),\r\n(lOperand, op, rOperand) =>  new ParseNode(-1, \"product\", [lOperand, op, rOperand]),\r\n(factor) => new ParseNode(-1, \"product\", [factor]),\r\n(lParen, exp, rParen) => new ParseNode(-1, \"Factor\", [lParen, exp, rParen]),\r\n(v) => new ParseNode(-1, \"factor\", [v]),\r\n(nt, factor) => new ParseNode(-1, \"factor\", [nt, factor]),\r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v]), \r\n(v) => new ParseNode(-1, \"var\", [v]), (v) => new ParseNode(-1, \"var\", [v])\r\n\r\n(A+~C+B*D)*(~A+(~B+D)*(C+~D))\r\n\"~(A^C)@(B%D)\"\r\n\r\n(lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n(complexOp) => complexOp,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(product) => product,\r\n(lOperand, op, rOperand) =>  [lOperand, op, rOperand],\r\n(factor) => factor,\r\n(lParen, exp, rParen) => [lParen, exp, rParen],\r\n(v) => v,\r\n(nt, factor) => [nt, factor],\r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v,  \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v, (v) => v, \r\n(v) => v, (v) => v, (v) => v, (v) => v, (v) => v\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}