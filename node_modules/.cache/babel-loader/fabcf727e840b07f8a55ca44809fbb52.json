{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\ExpressionForm.jsx\";\nimport { thisExpression } from \"@babel/types\";\nimport React from \"react\";\nimport { InputGroup, FormControl, Button, Form, Col, Row, Accordion } from \"react-bootstrap\";\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\nimport OperatorTable from \"./OperatorTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ExpressionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        expValue: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      try {\n        this.expression = BoolExpression.ExpressionInstance(this.state.expValue, true);\n        this.setState({\n          isInvalid: false\n        }, () => {\n          this.props.displayExpression(this.expression);\n        });\n      } catch (error) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState({\n          isInvalid: true,\n          errorMsg: \"Error: \" + error + \"!\"\n        });\n      }\n    };\n\n    this.state = {\n      expValue: \"\",\n      isInvalid: false,\n      errorMsg: \"Invalid Expression\"\n    };\n    this.expression = null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        validated: this.state.validated,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"expressionForm\",\n          children: /*#__PURE__*/_jsxDEV(InputGroup, {\n            hasValidation: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              placeholder: \"Enter Expression\",\n              \"aria-label\": \"Enter Expression\",\n              \"aria-describedby\": \"basic-addon\",\n              onChange: this.handleChange,\n              isInvalid: this.state.isInvalid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              id: \"button-addon\",\n              onClick: this.handleSubmit,\n              children: \"Simplify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: this.state.errorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        flush: true,\n        children: /*#__PURE__*/_jsxDEV(Accordion.Item, {\n          eventKey: \"0\",\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Operator Symbols \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 50\n              }, this), \" Examples \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 68\n              }, this), \" About\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n            children: [\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\", /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(OperatorTable, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ExpressionForm;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ExpressionForm.jsx"],"names":["thisExpression","React","InputGroup","FormControl","Button","Form","Col","Row","Accordion","BoolExpression","OperatorTable","ExpressionForm","Component","constructor","props","handleChange","event","setState","expValue","target","value","handleSubmit","expression","ExpressionInstance","state","isInvalid","displayExpression","error","preventDefault","stopPropagation","errorMsg","render","validated"],"mappings":"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","sourcesContent":["import { thisExpression } from \"@babel/types\";\r\nimport React from \"react\";\r\nimport {\r\n    InputGroup,\r\n    FormControl,\r\n    Button,\r\n    Form,\r\n    Col,\r\n    Row,\r\n    Accordion,\r\n} from \"react-bootstrap\";\r\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\r\nimport OperatorTable from \"./OperatorTable\";\r\n\r\nclass ExpressionForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { expValue: \"\", isInvalid: false, errorMsg: \"Invalid Expression\" };\r\n        this.expression = null;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ expValue: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        try {\r\n            this.expression = BoolExpression.ExpressionInstance(\r\n                this.state.expValue,\r\n                true\r\n            );\r\n            this.setState({ isInvalid: false }, () => {\r\n                this.props.displayExpression(this.expression);\r\n            });\r\n        } catch (error) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.setState({ isInvalid: true, errorMsg: \"Error: \" + error + \"!\" });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Form noValidate validated={this.state.validated}>\r\n                    <Form.Group as={Col} controlId=\"expressionForm\">\r\n                        <InputGroup hasValidation>\r\n                            <FormControl\r\n                                required\r\n                                placeholder=\"Enter Expression\"\r\n                                aria-label=\"Enter Expression\"\r\n                                aria-describedby=\"basic-addon\"\r\n                                onChange={this.handleChange}\r\n                                isInvalid={this.state.isInvalid}\r\n                            />\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                id=\"button-addon\"\r\n                                onClick={this.handleSubmit}\r\n                            >\r\n                                Simplify\r\n                            </Button>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {this.state.errorMsg}\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                </Form>\r\n                <Accordion flush>\r\n                    <Accordion.Item eventKey=\"0\">\r\n                        <Accordion.Header>\r\n                            <p>\r\n                                Operator Symbols <b>/</b> Examples <b>/</b> About\r\n                            </p>\r\n                        </Accordion.Header>\r\n\r\n                        <Accordion.Body>\r\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                            do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                            Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n                            laboris nisi ut aliquip ex ea commodo consequat. Duis aute\r\n                            irure dolor in reprehenderit in voluptate velit esse cillum\r\n                            dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n                            cupidatat non proident, sunt in culpa qui officia deserunt\r\n                            mollit anim id est laborum.\r\n                            <Row>\r\n                                <Col>\r\n                                    <OperatorTable />\r\n                                </Col>\r\n                                <Col></Col>\r\n                                <Col></Col>\r\n                            </Row>\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                </Accordion>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpressionForm;\r\n"]},"metadata":{},"sourceType":"module"}