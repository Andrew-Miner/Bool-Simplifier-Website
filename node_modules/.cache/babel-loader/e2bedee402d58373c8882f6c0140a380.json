{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Documents\\\\JavaScript Projects\\\\bool-simp\\\\src\\\\components\\\\ExpressionForm.jsx\";\nimport React from \"react\";\nimport { InputGroup, FormControl, Button, Form, Col } from \"react-bootstrap\";\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\nimport AboutAccordion from \"./AboutAccordion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ExpressionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        expValue: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      try {\n        this.expression = BoolExpression.ExpressionInstance(this.state.expValue, true);\n        this.setState({\n          isInvalid: false\n        }, () => {\n          this.props.displayExpression(this.expression);\n        });\n      } catch (error) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState({\n          isInvalid: true,\n          errorMsg: \"Error: \" + error.message + \"!\"\n        });\n      }\n    };\n\n    this.displayExpression = str => {\n      try {\n        this.expression = BoolExpression.ExpressionInstance(str, true);\n        this.setState({\n          isInvalid: false,\n          expValue: str\n        }, () => {\n          this.props.displayExpression(this.expression);\n        });\n      } catch (error) {\n        this.setState({\n          isInvalid: true,\n          expValue: str,\n          errorMsg: \"Error: \" + error.message + \"!\"\n        });\n      }\n    };\n\n    this.state = {\n      expValue: \"\",\n      isInvalid: false,\n      errorMsg: \"Invalid Expression\"\n    };\n    this.expression = null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        validated: this.state.validated,\n        onSubmit: true,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"expressionForm\",\n          children: /*#__PURE__*/_jsxDEV(InputGroup, {\n            hasValidation: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              placeholder: \"Enter Expression\",\n              \"aria-label\": \"Enter Expression\",\n              \"aria-describedby\": \"basic-addon\",\n              onChange: this.handleChange,\n              isInvalid: this.state.isInvalid,\n              value: this.state.expValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              id: \"button-addon\",\n              onClick: this.handleSubmit,\n              children: \"Simplify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: this.state.errorMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AboutAccordion, {\n          onClick: this.displayExpression\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default ExpressionForm;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ExpressionForm.jsx"],"names":["React","InputGroup","FormControl","Button","Form","Col","BoolExpression","AboutAccordion","ExpressionForm","Component","constructor","props","handleChange","event","setState","expValue","target","value","handleSubmit","expression","ExpressionInstance","state","isInvalid","displayExpression","error","preventDefault","stopPropagation","errorMsg","message","str","render","validated"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { InputGroup, FormControl, Button, Form, Col } from \"react-bootstrap\";\r\nimport BoolExpression from \"../scripts/BooleanSimplifier/BoolExpression\";\r\nimport AboutAccordion from \"./AboutAccordion\";\r\n\r\nclass ExpressionForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expValue: \"\",\r\n            isInvalid: false,\r\n            errorMsg: \"Invalid Expression\",\r\n        };\r\n        this.expression = null;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ expValue: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        try {\r\n            this.expression = BoolExpression.ExpressionInstance(\r\n                this.state.expValue,\r\n                true\r\n            );\r\n            this.setState({ isInvalid: false }, () => {\r\n                this.props.displayExpression(this.expression);\r\n            });\r\n        } catch (error) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.setState({ isInvalid: true, errorMsg: \"Error: \" + error.message + \"!\" });\r\n        }\r\n    };\r\n\r\n    displayExpression = (str) => {\r\n        try {\r\n            this.expression = BoolExpression.ExpressionInstance(str, true);\r\n            this.setState({ isInvalid: false, expValue: str }, () => {\r\n                this.props.displayExpression(this.expression);\r\n            });\r\n        } catch (error) {\r\n            this.setState({\r\n                isInvalid: true,\r\n                expValue: str,\r\n                errorMsg: \"Error: \" + error.message + \"!\",\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Form noValidate validated={this.state.validated} onSubmit>\r\n                    <Form.Group as={Col} controlId=\"expressionForm\">\r\n                        <InputGroup hasValidation>\r\n                            <FormControl\r\n                                required\r\n                                placeholder=\"Enter Expression\"\r\n                                aria-label=\"Enter Expression\"\r\n                                aria-describedby=\"basic-addon\"\r\n                                onChange={this.handleChange}\r\n                                isInvalid={this.state.isInvalid}\r\n                                value={this.state.expValue}\r\n                            />\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                id=\"button-addon\"\r\n                                onClick={this.handleSubmit}\r\n                            >\r\n                                Simplify\r\n                            </Button>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {this.state.errorMsg}\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                    <AboutAccordion onClick={this.displayExpression} />\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpressionForm;\r\n"]},"metadata":{},"sourceType":"module"}