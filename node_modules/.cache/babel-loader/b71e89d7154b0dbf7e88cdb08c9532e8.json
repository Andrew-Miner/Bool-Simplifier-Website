{"ast":null,"code":"import{Table}from\"react-bootstrap\";import{Badge}from\"react-bootstrap\";import PM from\"../scripts/BooleanSimplifier/PMFunctions\";import QM from\"../scripts/BooleanSimplifier/QMFunctions\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ImplicantTable(props){var minTerms=props.expression.getMinTerms();minTerms.reverse();var primeImps=props.expression.getEssentialImplicants();var groups=PM.groupPrimeImplicants(primeImps,minTerms);// map\nvar VAR_OFFSET=10;var varCount=0;return/*#__PURE__*/_jsxs(Table,{className:props.className,striped:true,bordered:true,hover:true,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:\"text-center\",children:\"Petrick Variable\"}),/*#__PURE__*/_jsx(\"th\",{className:\"text-center\",children:\"Essential Implicant\"}),minTerms.map(function(term){var group=groups.get(term);if(group===undefined)throw new Error(\"undefined prime implicant group [\"+parseInt(term)+\"]\");var cName=\"text-center\";if(group.length===1)cName+=\" success-cell\";return/*#__PURE__*/_jsx(\"th\",{className:cName,children:/*#__PURE__*/_jsx(Badge,{pill:true,bg:\"primary\",className:\"ml-1\",children:term})},term);})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:primeImps.map(function(imp){return/*#__PURE__*/_jsx(ImpRow,{implicant:imp,minTerms:minTerms,implicantGroups:groups,varCount:props.expression.getVarCount(),variable:String.fromCharCode((varCount++ +VAR_OFFSET)%26+65)},imp.term.toString()+\"-\"+imp.dashMask.toString()+\"-row\");})})]});}function ImpRow(props){var impMinTerms=QM.extractMinTerms(props.implicant);return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"text-center\",children:/*#__PURE__*/_jsx(\"strong\",{children:props.variable})}),/*#__PURE__*/_jsx(\"td\",{className:\"text-center\",children:/*#__PURE__*/_jsx(Badge,{bg:\"success\",className:\"ml-1\",children:QM.toString(props.implicant,props.varCount)})}),props.minTerms.map(function(term){var group=props.implicantGroups.get(term);if(group===undefined)throw new Error(\"undefined prime implicant group [\"+parseInt(term)+\"]\");var cName=\"text-center\";if(group.length===1)cName+=\" success-cell\";if(impMinTerms.includes(term)){if(group.length===1){return/*#__PURE__*/_jsx(\"td\",{className:cName,children:/*#__PURE__*/_jsx(Badge,{pill:true,bg:\"danger\",className:\"ml-1\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"X\"})})},parseInt(term)+\"-\"+QM.toString(props.implicant,props.varCount));}else{return/*#__PURE__*/_jsx(\"td\",{className:cName,children:/*#__PURE__*/_jsx(\"strong\",{children:\"X\"})},parseInt(term)+\"-\"+QM.toString(props.implicant,props.varCount));}}return/*#__PURE__*/_jsx(\"td\",{className:cName},parseInt(term)+\"-\"+QM.toString(props.implicant,props.varCount));})]});}","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/components/ImplicantTable.jsx"],"names":["Table","Badge","PM","QM","ImplicantTable","props","minTerms","expression","getMinTerms","reverse","primeImps","getEssentialImplicants","groups","groupPrimeImplicants","VAR_OFFSET","varCount","className","map","term","group","get","undefined","Error","parseInt","cName","length","imp","getVarCount","String","fromCharCode","toString","dashMask","ImpRow","impMinTerms","extractMinTerms","implicant","variable","implicantGroups","includes"],"mappings":"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","sourcesContent":["import { Table } from \"react-bootstrap\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport PM from \"../scripts/BooleanSimplifier/PMFunctions\";\r\nimport QM from \"../scripts/BooleanSimplifier/QMFunctions\";\r\n\r\nexport default function ImplicantTable(props) {\r\n    let minTerms = props.expression.getMinTerms();\r\n    minTerms.reverse();\r\n\r\n    let primeImps = props.expression.getEssentialImplicants();\r\n    let groups = PM.groupPrimeImplicants(primeImps, minTerms); // map\r\n\r\n    const VAR_OFFSET = 10;\r\n    let varCount = 0;\r\n    return (\r\n        <Table className={props.className} striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"text-center\">Petrick Variable</th>\r\n                    <th className=\"text-center\">Essential Implicant</th>\r\n                    {minTerms.map((term) => {\r\n                        let group = groups.get(term);\r\n\r\n                        if (group === undefined)\r\n                            throw new Error(\r\n                                \"undefined prime implicant group [\" + parseInt(term) + \"]\"\r\n                            );\r\n\r\n                        let cName = \"text-center\";\r\n                        if (group.length === 1) cName += \" success-cell\";\r\n\r\n                        return (\r\n                            <th className={cName} key={term}>\r\n                                <Badge pill bg=\"primary\" className=\"ml-1\">\r\n                                    {term}\r\n                                </Badge>\r\n                            </th>\r\n                        );\r\n                    })}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {primeImps.map((imp) => (\r\n                    <ImpRow\r\n                        implicant={imp}\r\n                        minTerms={minTerms}\r\n                        implicantGroups={groups}\r\n                        varCount={props.expression.getVarCount()}\r\n                        variable={String.fromCharCode(\r\n                            ((varCount++ + VAR_OFFSET) % 26) + 65\r\n                        )}\r\n                        key={imp.term.toString() + \"-\" + imp.dashMask.toString() + \"-row\"}\r\n                    />\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nfunction ImpRow(props) {\r\n    let impMinTerms = QM.extractMinTerms(props.implicant);\r\n    return (\r\n        <tr>\r\n            <td className=\"text-center\">\r\n                <strong>{props.variable}</strong>\r\n            </td>\r\n            <td className=\"text-center\">\r\n                <Badge bg=\"success\" className=\"ml-1\">\r\n                    {QM.toString(props.implicant, props.varCount)}\r\n                </Badge>\r\n            </td>\r\n            {props.minTerms.map((term) => {\r\n                let group = props.implicantGroups.get(term);\r\n\r\n                if (group === undefined)\r\n                    throw new Error(\r\n                        \"undefined prime implicant group [\" + parseInt(term) + \"]\"\r\n                    );\r\n\r\n                let cName = \"text-center\";\r\n                if (group.length === 1) cName += \" success-cell\";\r\n\r\n                if (impMinTerms.includes(term)) {\r\n                    if (group.length === 1) {\r\n                        return (\r\n                            <td\r\n                                className={cName}\r\n                                key={\r\n                                    parseInt(term) +\r\n                                    \"-\" +\r\n                                    QM.toString(props.implicant, props.varCount)\r\n                                }\r\n                            >\r\n                                <Badge pill bg=\"danger\" className=\"ml-1\">\r\n                                    <strong>X</strong>\r\n                                </Badge>\r\n                            </td>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <td\r\n                                key={\r\n                                    parseInt(term) +\r\n                                    \"-\" +\r\n                                    QM.toString(props.implicant, props.varCount)\r\n                                }\r\n                                className={cName}\r\n                            >\r\n                                <strong>X</strong>\r\n                            </td>\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <td\r\n                        className={cName}\r\n                        key={\r\n                            parseInt(term) +\r\n                            \"-\" +\r\n                            QM.toString(props.implicant, props.varCount)\r\n                        }\r\n                    ></td>\r\n                );\r\n            })}\r\n        </tr>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}