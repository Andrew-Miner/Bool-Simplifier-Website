{"ast":null,"code":"import StructFactory from \"../StructFactory\";\nimport { Terminal, NonTerminal } from \"./Symbol\";\nexport const EarleyItem = StructFactory(\"rule next start\");\nexport const Grammar = StructFactory(\"startRule rules\");\nexport const Rule = StructFactory(\"name definition\");\nexport const testG2 = new Grammar(\"A\", [new Rule(\"A\", [new NonTerminal(\"A\"), new Terminal(\"a\")]), new Rule(\"A\", [])]);\nexport const testG = new Grammar(\"Sum\", [new Rule(\"Sum\", [new NonTerminal(\"Sum\"), new Terminal([\"+\", \"-\"]), new NonTerminal(\"Product\")]), new Rule(\"Sum\", [new NonTerminal(\"Product\")]), new Rule(\"Product\", [new NonTerminal(\"Product\"), new Terminal([\"*\", \"/\"]), new NonTerminal(\"Factor\")]), new Rule(\"Product\", [new NonTerminal(\"Factor\")]), new Rule(\"Factor\", [new Terminal(\"(\"), new NonTerminal(\"Sum\"), new Terminal(\")\")]), new Rule(\"Factor\", [new NonTerminal(\"Number\")]), new Rule(\"Number\", [new NonTerminal(\"Number\"), new Terminal([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])]), new Rule(\"Number\", [new Terminal([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])])]);\nexport const testAactionsA = [(lOperand, op, rOperand) => [lOperand, op, rOperand], product => product, (lOperand, op, rOperand) => [lOperand, op, rOperand], factor => factor, (lParen, sum, rParen) => sum, number => number, (num1, num2) => num1 + num2, number => number];\nexport const testAactionsB = [(lOperand, op, rOperand) => eval(lOperand + op + rOperand), product => product, (lOperand, op, rOperand) => eval(lOperand + op + rOperand), factor => factor, (lParen, sum, rParen) => sum, number => number, (num1, num2) => num1 + num2, number => number];\nconst EarleyRecognizer = {\n  buildItems(input, grammar) {\n    let nullableSet = this.getNullableRules(grammar);\n    let s = [[]];\n\n    for (let i = 0; i < grammar.rules.length; i++) {\n      if (grammar.rules[i].name === grammar.startRule) {\n        s[0].push(new EarleyItem(i, 0, 0));\n      }\n    }\n\n    for (let i = 0; i < s.length; i++) {\n      for (let j = 0; j < s[i].length; j++) {\n        let symbol = this.nextSymbol(s[i][j], grammar);\n        if (symbol === null) this.complete(s, i, j, grammar);else if (symbol instanceof Terminal) this.scan(s, i, j, symbol, input);else if (symbol instanceof NonTerminal) this.predict(s, i, j, symbol, nullableSet, grammar);else throw new Error(\"illegal rule\");\n      }\n    }\n\n    return s;\n  },\n\n  nextSymbol(item, grammar) {\n    if (grammar.rules[item.rule].definition.length <= item.next) return null;\n    return grammar.rules[item.rule].definition[item.next];\n  },\n\n  complete(s, i, j, grammar) {\n    let item = s[i][j];\n\n    for (let k = 0; k < s[item.start].length; k++) {\n      let nextSym = this.nextSymbol(s[item.start][k], grammar);\n      if (nextSym !== null && nextSym.match(grammar.rules[item.rule].name)) this.appendItem(s[i], new EarleyItem(s[item.start][k].rule, s[item.start][k].next + 1, s[item.start][k].start));\n    }\n  },\n\n  scan(s, i, j, symbol, input) {\n    if (i >= input.length) return;\n    let item = s[i][j];\n\n    if (symbol.match(input.substring(i, i + 1))) {\n      if (i + 1 > s.length - 1) s.push([]);\n      s[i + 1].push(new EarleyItem(item.rule, item.next + 1, item.start));\n    }\n  },\n\n  predict(s, i, j, symbol, nss, grammar) {\n    for (let k = 0; k < grammar.rules.length; k++) {\n      if (symbol.match(grammar.rules[k].name)) {\n        this.appendItem(s[i], new EarleyItem(k, 0, i)); // magical completion\n\n        if (nss.has(grammar.rules[k].name)) this.appendItem(s[i], new EarleyItem(s[i][j].rule, s[i][j].next + 1, s[i][j].start));\n      }\n    }\n  },\n\n  appendItem(items, item) {\n    for (const it of items) {\n      if (JSON.stringify(it) === JSON.stringify(item)) return false;\n    }\n\n    items.push(item);\n    return true;\n  },\n\n  getNullableRules(grammar) {\n    let nullableSet = new Set();\n    let oldSize = 0;\n\n    do {\n      oldSize = nullableSet.size;\n      this.updateNullableSet(nullableSet, grammar);\n    } while (oldSize !== nullableSet.size);\n\n    return nullableSet;\n  },\n\n  updateNullableSet(nullableSet, grammar) {\n    for (let i = 0; i < grammar.rules.length; i++) {\n      if (this.isNullable(grammar.rules[i], nullableSet)) nullableSet.add(grammar.rules[i].name);\n    }\n  },\n\n  isNullable(rule, nullableSet) {\n    for (let i = 0; i < rule.definition.length; i++) {\n      if (nullableSet.has(rule.definition[i].toString()) === false) return false;\n    }\n\n    return true;\n  },\n\n  printEarlySets(s, g, hideIncomplete = false) {\n    let lines = [];\n    let maxDefLen = 0;\n    let maxNameLen = 0;\n\n    for (let i = 0; i < s.length; i++) {\n      lines.push([]);\n\n      for (let j = 0; j < s[i].length; j++) {\n        let item = s[i][j];\n        let ruleDef = \"\";\n        let ruleName = \"\";\n\n        if (item.rule > -1) {\n          let rule = g.rules[item.rule];\n          ruleName = rule.name;\n          if (ruleName.length > maxNameLen) maxNameLen = ruleName.length;\n          let defSize = rule.definition.length;\n\n          for (let k = 0; k < defSize; k++) {\n            if (k === item.next) ruleDef += \" @\";\n            if (rule.definition[k] instanceof Terminal) ruleDef += \" \" + rule.definition[k].toString();else if (rule.definition[k] instanceof NonTerminal) ruleDef += \" \" + rule.definition[k].toString();else throw new Error(\"impossible symbol\");\n          }\n\n          if (item.next >= defSize) ruleDef += \" @\";else if (hideIncomplete) continue;\n          if (ruleDef.length > maxDefLen) maxDefLen = ruleDef.length;\n        } else ruleDef = \"{\" + item.rule + \", \" + item.next + \"}\";\n\n        lines[i].push({\n          name: ruleName,\n          definition: ruleDef,\n          start: \"(\" + item.start + \")\"\n        });\n      }\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      console.log(\"    === \" + i + \" ===\");\n\n      for (let j = 0; j < lines[i].length; j++) {\n        let l = lines[i][j];\n        let str = l.name.padEnd(maxNameLen, \" \") + \" -> \";\n        str += l.definition.padEnd(maxDefLen) + \" \" + l.start;\n        console.log(str);\n      }\n\n      if (i !== lines.length - 1) console.log(\" \");\n    }\n  }\n\n};\nexport default EarleyRecognizer;","map":{"version":3,"sources":["C:/Users/Andrew/Documents/JavaScript Projects/bool-simp/src/scripts/Earley Parser/EarleyRecognizer.js"],"names":["StructFactory","Terminal","NonTerminal","EarleyItem","Grammar","Rule","testG2","testG","testAactionsA","lOperand","op","rOperand","product","factor","lParen","sum","rParen","number","num1","num2","testAactionsB","eval","EarleyRecognizer","buildItems","input","grammar","nullableSet","getNullableRules","s","i","rules","length","name","startRule","push","j","symbol","nextSymbol","complete","scan","predict","Error","item","rule","definition","next","k","start","nextSym","match","appendItem","substring","nss","has","items","it","JSON","stringify","Set","oldSize","size","updateNullableSet","isNullable","add","toString","printEarlySets","g","hideIncomplete","lines","maxDefLen","maxNameLen","ruleDef","ruleName","defSize","console","log","l","str","padEnd"],"mappings":"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","sourcesContent":["import StructFactory from \"../StructFactory\";\r\nimport { Terminal, NonTerminal } from \"./Symbol\";\r\n\r\nexport const EarleyItem = StructFactory(\"rule next start\");\r\nexport const Grammar = StructFactory(\"startRule rules\");\r\nexport const Rule = StructFactory(\"name definition\");\r\n\r\nexport const testG2 = new Grammar(\"A\", [\r\n    new Rule(\"A\", [new NonTerminal(\"A\"), new Terminal(\"a\")]),\r\n    new Rule(\"A\", []),\r\n]);\r\n\r\nexport const testG = new Grammar(\"Sum\", [\r\n    new Rule(\"Sum\", [\r\n        new NonTerminal(\"Sum\"),\r\n        new Terminal([\"+\", \"-\"]),\r\n        new NonTerminal(\"Product\"),\r\n    ]),\r\n\r\n    new Rule(\"Sum\", [new NonTerminal(\"Product\")]),\r\n\r\n    new Rule(\"Product\", [\r\n        new NonTerminal(\"Product\"),\r\n        new Terminal([\"*\", \"/\"]),\r\n        new NonTerminal(\"Factor\"),\r\n    ]),\r\n\r\n    new Rule(\"Product\", [new NonTerminal(\"Factor\")]),\r\n\r\n    new Rule(\"Factor\", [new Terminal(\"(\"), new NonTerminal(\"Sum\"), new Terminal(\")\")]),\r\n\r\n    new Rule(\"Factor\", [new NonTerminal(\"Number\")]),\r\n    new Rule(\"Number\", [\r\n        new NonTerminal(\"Number\"),\r\n        new Terminal([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]),\r\n    ]),\r\n\r\n    new Rule(\"Number\", [\r\n        new Terminal([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]),\r\n    ]),\r\n]);\r\n\r\nexport const testAactionsA = [\r\n    (lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n    (product) => product,\r\n    (lOperand, op, rOperand) => [lOperand, op, rOperand],\r\n    (factor) => factor,\r\n    (lParen, sum, rParen) => sum,\r\n    (number) => number,\r\n    (num1, num2) => num1 + num2,\r\n    (number) => number,\r\n];\r\n\r\nexport const testAactionsB = [\r\n    (lOperand, op, rOperand) => eval(lOperand + op + rOperand),\r\n    (product) => product,\r\n    (lOperand, op, rOperand) => eval(lOperand + op + rOperand),\r\n    (factor) => factor,\r\n    (lParen, sum, rParen) => sum,\r\n    (number) => number,\r\n    (num1, num2) => num1 + num2,\r\n    (number) => number,\r\n];\r\n\r\nconst EarleyRecognizer = {\r\n    buildItems(input, grammar) {\r\n        let nullableSet = this.getNullableRules(grammar);\r\n        let s = [[]];\r\n\r\n        for (let i = 0; i < grammar.rules.length; i++) {\r\n            if (grammar.rules[i].name === grammar.startRule) {\r\n                s[0].push(new EarleyItem(i, 0, 0));\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < s.length; i++) {\r\n            for (let j = 0; j < s[i].length; j++) {\r\n                let symbol = this.nextSymbol(s[i][j], grammar);\r\n                if (symbol === null) this.complete(s, i, j, grammar);\r\n                else if (symbol instanceof Terminal) this.scan(s, i, j, symbol, input);\r\n                else if (symbol instanceof NonTerminal)\r\n                    this.predict(s, i, j, symbol, nullableSet, grammar);\r\n                else throw new Error(\"illegal rule\");\r\n            }\r\n        }\r\n\r\n        return s;\r\n    },\r\n\r\n    nextSymbol(item, grammar) {\r\n        if (grammar.rules[item.rule].definition.length <= item.next) return null;\r\n        return grammar.rules[item.rule].definition[item.next];\r\n    },\r\n\r\n    complete(s, i, j, grammar) {\r\n        let item = s[i][j];\r\n        for (let k = 0; k < s[item.start].length; k++) {\r\n            let nextSym = this.nextSymbol(s[item.start][k], grammar);\r\n            if (nextSym !== null && nextSym.match(grammar.rules[item.rule].name))\r\n                this.appendItem(\r\n                    s[i],\r\n                    new EarleyItem(\r\n                        s[item.start][k].rule,\r\n                        s[item.start][k].next + 1,\r\n                        s[item.start][k].start\r\n                    )\r\n                );\r\n        }\r\n    },\r\n\r\n    scan(s, i, j, symbol, input) {\r\n        if (i >= input.length) return;\r\n\r\n        let item = s[i][j];\r\n        if (symbol.match(input.substring(i, i + 1))) {\r\n            if (i + 1 > s.length - 1) s.push([]);\r\n\r\n            s[i + 1].push(new EarleyItem(item.rule, item.next + 1, item.start));\r\n        }\r\n    },\r\n\r\n    predict(s, i, j, symbol, nss, grammar) {\r\n        for (let k = 0; k < grammar.rules.length; k++) {\r\n            if (symbol.match(grammar.rules[k].name)) {\r\n                this.appendItem(s[i], new EarleyItem(k, 0, i));\r\n                // magical completion\r\n                if (nss.has(grammar.rules[k].name))\r\n                    this.appendItem(\r\n                        s[i],\r\n                        new EarleyItem(s[i][j].rule, s[i][j].next + 1, s[i][j].start)\r\n                    );\r\n            }\r\n        }\r\n    },\r\n\r\n    appendItem(items, item) {\r\n        for (const it of items) {\r\n            if (JSON.stringify(it) === JSON.stringify(item)) return false;\r\n        }\r\n        items.push(item);\r\n        return true;\r\n    },\r\n\r\n    getNullableRules(grammar) {\r\n        let nullableSet = new Set();\r\n        let oldSize = 0;\r\n        do {\r\n            oldSize = nullableSet.size;\r\n            this.updateNullableSet(nullableSet, grammar);\r\n        } while (oldSize !== nullableSet.size);\r\n        return nullableSet;\r\n    },\r\n\r\n    updateNullableSet(nullableSet, grammar) {\r\n        for (let i = 0; i < grammar.rules.length; i++) {\r\n            if (this.isNullable(grammar.rules[i], nullableSet))\r\n                nullableSet.add(grammar.rules[i].name);\r\n        }\r\n    },\r\n\r\n    isNullable(rule, nullableSet) {\r\n        for (let i = 0; i < rule.definition.length; i++) {\r\n            if (nullableSet.has(rule.definition[i].toString()) === false) return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    printEarlySets(s, g, hideIncomplete = false) {\r\n        let lines = [];\r\n        let maxDefLen = 0;\r\n        let maxNameLen = 0;\r\n\r\n        for (let i = 0; i < s.length; i++) {\r\n            lines.push([]);\r\n            for (let j = 0; j < s[i].length; j++) {\r\n                let item = s[i][j];\r\n                let ruleDef = \"\";\r\n                let ruleName = \"\";\r\n\r\n                if (item.rule > -1) {\r\n                    let rule = g.rules[item.rule];\r\n                    ruleName = rule.name;\r\n                    if (ruleName.length > maxNameLen) maxNameLen = ruleName.length;\r\n\r\n                    let defSize = rule.definition.length;\r\n                    for (let k = 0; k < defSize; k++) {\r\n                        if (k === item.next) ruleDef += \" @\";\r\n                        if (rule.definition[k] instanceof Terminal)\r\n                            ruleDef += \" \" + rule.definition[k].toString();\r\n                        else if (rule.definition[k] instanceof NonTerminal)\r\n                            ruleDef += \" \" + rule.definition[k].toString();\r\n                        else throw new Error(\"impossible symbol\");\r\n                    }\r\n                    if (item.next >= defSize) ruleDef += \" @\";\r\n                    else if (hideIncomplete) continue;\r\n\r\n                    if (ruleDef.length > maxDefLen) maxDefLen = ruleDef.length;\r\n                } else ruleDef = \"{\" + item.rule + \", \" + item.next + \"}\";\r\n\r\n                lines[i].push({\r\n                    name: ruleName,\r\n                    definition: ruleDef,\r\n                    start: \"(\" + item.start + \")\",\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            console.log(\"    === \" + i + \" ===\");\r\n            for (let j = 0; j < lines[i].length; j++) {\r\n                let l = lines[i][j];\r\n                let str = l.name.padEnd(maxNameLen, \" \") + \" -> \";\r\n                str += l.definition.padEnd(maxDefLen) + \" \" + l.start;\r\n                console.log(str);\r\n            }\r\n            if (i !== lines.length - 1) console.log(\" \");\r\n        }\r\n    },\r\n};\r\n\r\nexport default EarleyRecognizer;\r\n"]},"metadata":{},"sourceType":"module"}